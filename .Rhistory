}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 10000), weight > 62), aes(date,weight), color = "darkblue", alpha = .05) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
suppressMessages(jon <- stan_glmer(day.change ~ (1 | phase), prior_intercept = normal(0,.1), data = jonbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 10000), weight > 62), aes(date,weight), color = "darkblue", alpha = .05) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
jonbody <- read_csv("~/Google Drive/body.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% mutate(wt = rescale((wt.constant)*(wt.constant^rev(row_number())))) %>% na.omit()
jonbody$weight <- ifelse(jonbody$phase = "maintain",1,jonbody$weight)
jonbody$weight <- ifelse(jonbody$phase == "maintain",1,jonbody$weight)
jonbody <- read_csv("~/Google Drive/body.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% mutate(wt = rescale((wt.constant)*(wt.constant^rev(row_number())))) %>% na.omit()
jonbody$phase <- ifelse(jonbody$date < as.Date("2021-02-01"),"maintain","cut")
jonbody$weight <- ifelse(jonbody$phase == "maintain",1,jonbody$weight)
jonbody <- read_csv("~/Google Drive/body.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% mutate(wt = rescale((wt.constant)*(wt.constant^rev(row_number())))) %>% na.omit()
jonbody$phase <- ifelse(jonbody$date < as.Date("2021-02-01"),"maintain","cut")
jonbody$wt <- ifelse(jonbody$phase == "maintain",1,jonbody$wt)
suppressMessages(jon <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = jonbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 10000), weight > 62), aes(date,weight), color = "darkblue", alpha = .05) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
kimbody <- read_csv("~/Google Drive/kimbody.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% mutate(wt = rescale((wt.constant)*(wt.constant^rev(row_number())))) %>% na.omit()
kimbody$phase <- ifelse(kimbody$date < as.Date("2021-02-01"),"maintain","cut")
kimbody$wt <- ifelse(kimbody$phase == "maintain",1,kimbody$wt)
suppressMessages(kim <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = kimbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(kimbody$date))
dates <- c(max(kimbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(kimbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = kimbody$day.change[nrow(kimbody)]), draws = n.sims))) %>% mutate(weight = kimbody$weight[nrow(kimbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 10000), weight > 50), aes(date,weight), color = "darkblue", alpha = .05) + geom_point(data=kimbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 60, alpha = .2) + geom_hline(yintercept = 54, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 54) %>% slice(1)
message(white(paste0("Kim's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Kim's median goal date: ",as.character(median(goal$date)))))
# kimbody <- read_csv("~/Google Drive/kimbody.csv", col_types = cols()) %>% filter(metabolism != 0) %>% rename(muscle = muscleRate, bodyfat = fatRate, water = bodyWaterRate) %>% mutate(fat = weight * (bodyfat/100), date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight,fat,muscle,bodyfat) %>% filter(date > as.Date("2021-01-31"))
# kimbody$phase <- ifelse(kimbody$date < as.Date("2021-02-01"),"maintain","cut")
#kimbody$days <- kimbody$date - as.Date("2021-01-31")
#kimbody$days[kimbody$days<0] <- 0
#
# n.sims <- 50
# dates <- c(max(kimbody$date)+0:210)
#
# projections <- tibble(date = rep(dates, times = n.sims)) %>% mutate(days =as.numeric(date - Sys.Date()))
# projections$weight <- as.numeric(posterior_predict(m1, newdata = projections, draws = 1))
#
# projections <- tibble(date = rep(dates, times = n.sims), weight.coef = rep(sample(as.matrix(m1)[,2],n.sims),each = length(dates)), prev.weight = as.numeric(kimbody$weight[nrow(kimbody)]), sim = rep(1:n.sims, each = length(dates))) %>% mutate(weight = prev.weight + weight.coef*as.numeric(date-max(kimbody$date)))
#
# realistic <- projections %>% group_by(date) %>% summarise(mean = mean(weight)) %>% filter(mean > 49)
#
#
# means <- projections %>% group_by(date) %>% summarize(kg = round(mean(weight),1))
# kg_goal_by <- projections %>% group_by(date) %>% filter(weight < 54) %>% summarize(kg_goal_by = n()/n.sims*100)
kimbody <- read_csv("~/Google Drive/kimbody.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% na.omit()
kimbody <- read_csv("~/Google Drive/kimbody.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% mutate(wt = (wt.constant)*(wt.constant^rev(row_number()))) %>% na.omit()
length(kimbody[phase == "cut"])
length(kimbody[kimbody$phase == "cut"])
length(kimbody[kimbody$phase == "cut"],)
length(kimbody$phase[kimbody$phase == "cut"],)
length(kimbody$phase[kimbody$phase == "cut"])
nrow(filter(kimbody,phase == "cut"))
kimbody <- read_csv("~/Google Drive/kimbody.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% na.omit()
kimbody$phase <- ifelse(kimbody$date < as.Date("2021-02-01"),"maintain","cut")
nrow(filter(kimbody,phase == "cut"))
length(kimbody[kimbody$phase == "cut"])
length(kimbody$phase[kimbody$phase == "cut"])
suppressMessages(kim <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = kimbody, weights = wt, verbose = F))
wt <- 1:as.numeric(nrow(filter(kimbody,phase == "cut")))
(wt.constant)*(wt.constant^wt)))
(wt.constant)*(wt.constant^wt))
(wt.constant)*(wt.constant^wt)
(.9)*(.9^wt)
(.99)*(.99^wt)
rescale((.99)*(.99^wt), to = c(.5,1)
)
plot(rescale((.99)*(.99^wt), to = c(.5,1)))
plot(rescale((.95)*(.95^wt), to = c(.5,1)))
plot(rescale((.9)*(.9^wt), to = c(.5,1)))
wt <- rescale((.9)*(.9^wt), to = c(.5,1))
wt
rescale(1-(.9)*(.9^wt), to = c(.5,1))
plot(rescale(1-(.9)*(.9^wt), to = c(.5,1)))
plot(rescale(-1*(.9)*(.9^wt), to = c(.5,1)))
plot(rescale((1-.9)*(.9^wt), to = c(.5,1)))
plot(rescale((1-.95)*(.95^wt), to = c(.5,1)))
plot(rescale((1-.8)*(.8^wt), to = c(.5,1)))
plot(rescale((1-.5)*(.5^wt), to = c(.5,1)))
plot(rescale((1-.9999)*(.9999^wt), to = c(.5,1)))
plot(rescale((1-1)*(1^wt), to = c(.5,1)))
plot(rescale((1-.99)*(.99^wt), to = c(.7,1)))
kimbody <- kimbody %>% mutate(wt = ifelse(phase == "maintain",1,rescale((1-.99)*(.99^(date - as.Date("2021-02-01"))), to = c(.7,1))))
kimbody <- read_csv("~/Google Drive/kimbody.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% na.omit()
kimbody$phase <- ifelse(kimbody$date < as.Date("2021-02-01"),"maintain","cut")
kimbody <- kimbody %>% mutate(wt = ifelse(phase == "maintain",1,rescale((1-.99)*(.99^(date - as.Date("2021-02-01"))), to = c(.7,1))))
kimbody <- kimbody %>% mutate(wt = ifelse(phase == "maintain",1,rescale((1-.99)*(.99^as.numeric(date - as.Date("2021-02-01"))), to = c(.7,1))))
kimbody <- kimbody %>% mutate(wt = ifelse(phase == "maintain",1,rescale(1-(.9)*(.9^as.numeric(date - as.Date("2021-02-01"))), to = c(.5,1))))
wts <- rescale(1-(.9)*(.9^as.numeric(date - as.Date("2021-02-01"))), to = c(.5,1))
wts <- 1:as.numeric(nrow(filter(kimbody,phase == "cut")))
wts <- rescale(1-(.9)*(.9^wt), to = c(.5,1))
kimbody <- read_csv("~/Google Drive/kimbody.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1), wt = 1) %>% na.omit()
kimbody$phase <- ifelse(kimbody$date < as.Date("2021-02-01"),"maintain","cut")
kimbody$wt[kimbody$phase == "cut"]
kimbody$wt[kimbody$phase == "cut"] <- wts
kimbody$wt[kimbody$phase == "cut"] <- rev(wts)
wts <- 1:as.numeric(nrow(filter(kimbody,phase == "cut")))
wts <- rescale((1-.9)*(.9^wt), to = c(.5,1))
kimbody$wt[kimbody$phase == "cut"] <- wts
suppressMessages(kim <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = kimbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(kimbody$date))
dates <- c(max(kimbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(kimbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = kimbody$day.change[nrow(kimbody)]), draws = n.sims))) %>% mutate(weight = kimbody$weight[nrow(kimbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 10000), weight > 50), aes(date,weight), color = "darkblue", alpha = .05) + geom_point(data=kimbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 60, alpha = .2) + geom_hline(yintercept = 54, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 54) %>% slice(1)
message(white(paste0("Kim's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Kim's median goal date: ",as.character(median(goal$date)))))
suppressMessages(library(tidyverse))
suppressMessages(library(plotly))
suppressMessages(library(crayon))
suppressMessages(library(rstanarm))
suppressMessages(library(progress))
suppressMessages(library(scales))
options(mc.cores = parallel::detectCores())
jonbody <- read_csv("~/Google Drive/jonbody.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1), wt = 1) %>% na.omit()
jonbody$phase <- ifelse(jonbody$date < as.Date("2021-02-01"),"maintain","cut")
wts <- 1:as.numeric(nrow(filter(jonbody,phase == "cut")))
wts <- rescale((1-.9)*(.9^wt), to = c(.75,1))
jonbody$wt[jonbody$phase == "cut"] <- wts
suppressMessages(jon <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = jonbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 10000), weight > 62), aes(date,weight), color = "darkblue", alpha = .05) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
jonbody <- read_csv("~/Google Drive/body.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1), wt = 1) %>% na.omit()
jonbody$phase <- ifelse(jonbody$date < as.Date("2021-02-01"),"maintain","cut")
wts <- 1:as.numeric(nrow(filter(jonbody,phase == "cut")))
wts <- rescale((1-.9)*(.9^wt), to = c(.75,1))
jonbody$wt[jonbody$phase == "cut"] <- wts
suppressMessages(jon <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = jonbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 10000), weight > 62), aes(date,weight), color = "darkblue", alpha = .05) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 20000), weight > 62), aes(date,weight), color = "darkblue", alpha = .05) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 20000), weight > 62), aes(date,weight), color = "darkblue", alpha = .2) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
kimbody <- read_csv("~/Google Drive/kimbody.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1), wt = 1) %>% na.omit()
kimbody$phase <- ifelse(kimbody$date < as.Date("2021-02-01"),"maintain","cut")
wts <- 1:as.numeric(nrow(filter(kimbody,phase == "cut")))
wts <- rescale((1-.9)*(.9^wt), to = c(.75,1))
kimbody$wt[kimbody$phase == "cut"] <- wts
suppressMessages(kim <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = kimbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-09-01") - max(kimbody$date))
dates <- c(max(kimbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(kimbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = kimbody$day.change[nrow(kimbody)]), draws = n.sims))) %>% mutate(weight = kimbody$weight[nrow(kimbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
suppressMessages(library(tidyverse))
suppressMessages(library(plotly))
suppressMessages(library(crayon))
suppressMessages(library(rstanarm))
suppressMessages(library(progress))
suppressMessages(library(scales))
options(mc.cores = parallel::detectCores())
jonbody <- read_csv("~/Google Drive/body.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1), wt = 1) %>% na.omit()
jonbody$phase <- ifelse(jonbody$date < as.Date("2021-02-01"),"maintain","cut")
wts <- 1:as.numeric(nrow(filter(jonbody,phase == "cut")))
wts <- rescale((1-.9)*(.9^wts), to = c(.75,1))
jonbody$wt[jonbody$phase == "cut"] <- wts
suppressMessages(jon <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = jonbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 20000), weight > 62), aes(date,weight), color = "darkblue", alpha = .2) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
tail(wts)
View(jonbody)
jonbody$wt[jonbody$phase == "cut"] <- rev(wts)
wts <- rescale((.9)*(.9^wts), to = c(.75,1))
tail(wts)
jonbody$wt[jonbody$phase == "cut"] <- wts
suppressMessages(jon <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = jonbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 20000), weight > 62), aes(date,weight), color = "darkblue", alpha = .2) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
suppressMessages(jon <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = jonbody, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 20000), weight > 62), aes(date,weight), color = "darkblue", alpha = .2) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
suppressMessages(jon <- stan_glmer(day.change ~ lag + (1 | phase), prior_intercept = normal(0,.1), data = jonbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 20000), weight > 62), aes(date,weight), color = "darkblue", alpha = .2) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
jonbody <- read_csv("~/Google Drive/body.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1), wt = 1) %>% na.omit()
jonbody$phase <- ifelse(jonbody$date < as.Date("2021-02-01"),"maintain","cut")
wts <- 1:as.numeric(nrow(filter(jonbody,phase == "cut")))
wts <- rescale((.9)*(.9^wts), to = c(.9,1))
jonbody$wt[jonbody$phase == "cut"] <- wts
suppressMessages(jon <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = jonbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 20000), weight > 62), aes(date,weight), color = "darkblue", alpha = .2) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
jonbody <- read_csv("~/Google Drive/body.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1), wt = .9) %>% na.omit()
jonbody$phase <- ifelse(jonbody$date < as.Date("2021-02-01"),"maintain","cut")
wts <- 1:as.numeric(nrow(filter(jonbody,phase == "cut")))
wts <- rescale((.9)*(.9^wts), to = c(.9,1))
jonbody$wt[jonbody$phase == "cut"] <- wts
suppressMessages(jon <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = jonbody, weights = wt, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 20000), weight > 62), aes(date,weight), color = "darkblue", alpha = .2) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
suppressMessages(library(tidyverse))
suppressMessages(library(plotly))
suppressMessages(library(crayon))
suppressMessages(library(rstanarm))
suppressMessages(library(progress))
suppressMessages(library(scales))
options(mc.cores = parallel::detectCores())
jonbody <- read_csv("~/Google Drive/body.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% na.omit()
jonbody$phase <- ifelse(jonbody$date < as.Date("2021-02-01"),"maintain","cut")
suppressMessages(jon <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = jonbody, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 20000), weight > 62), aes(date,weight), color = "darkblue", alpha = .2) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
View(curWarnings)
#### Kim
kimbody <- read_csv("~/Google Drive/kimbody.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% na.omit()
kimbody$phase <- ifelse(kimbody$date < as.Date("2021-02-01"),"maintain","cut")
suppressMessages(kim <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = kimbody, verbose = F))
n.sims <- 1000
days.to.sim <- as.numeric(as.Date("2021-09-01") - max(kimbody$date))
dates <- c(max(kimbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(kimbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = kimbody$day.change[nrow(kimbody)]), draws = n.sims))) %>% mutate(weight = kimbody$weight[nrow(kimbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(sample_n(projections, 20000), weight > 50), aes(date,weight), color = "darkblue", alpha = .05) + geom_point(data=kimbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 60, alpha = .2) + geom_hline(yintercept = 54, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 54) %>% slice(1)
message(white(paste0("Kim's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Kim's median goal date: ",as.character(median(goal$date)))))
n.sims <- 50
days.to.sim <- as.numeric(as.Date("2021-09-01") - max(kimbody$date))
dates <- c(max(kimbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(kimbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = kimbody$day.change[nrow(kimbody)]), draws = n.sims))) %>% mutate(weight = kimbody$weight[nrow(kimbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_point(data=filter(projections, weight > 50), aes(date,weight), color = "darkblue", alpha = .05) + geom_point(data=kimbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 60, alpha = .2) + geom_hline(yintercept = 54, alpha = .2) + theme_minimal()
)
View(projections)
ggplotly(
ggplot() + geom_line(data=filter(projections, weight > 50), aes(date,weight,group = sim), color = "darkblue", alpha = .05) + geom_point(data=kimbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 60, alpha = .2) + geom_hline(yintercept = 54, alpha = .2) + theme_minimal()
)
ggplotly(
ggplot() + geom_line(data=filter(projections, weight > 50), aes(date,weight,group = sim), color = "darkblue", alpha = .3) + geom_point(data=kimbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 60, alpha = .2) + geom_hline(yintercept = 54, alpha = .2) + theme_minimal()
)
n.sims <- 100
days.to.sim <- as.numeric(as.Date("2021-09-01") - max(kimbody$date))
dates <- c(max(kimbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(kimbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = kimbody$day.change[nrow(kimbody)]), draws = n.sims))) %>% mutate(weight = kimbody$weight[nrow(kimbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(kim, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_line(data=filter(projections, weight > 50), aes(date,weight,group = sim), color = "darkblue", alpha = .2) + geom_point(data=kimbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 60, alpha = .2) + geom_hline(yintercept = 54, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 54) %>% slice(1)
message(white(paste0("Kim's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Kim's median goal date: ",as.character(median(goal$date)))))
jonbody <- read_csv("~/Google Drive/body.csv", col_types = cols()) %>% filter(metabolism != 0)  %>% mutate(date = as.Date("2020-12-13")+round(timestamp/86400-18609)) %>% select(date,weight) %>% group_by(date) %>% summarize(weight = mean(weight)) %>% mutate(day.change = (weight-lag(weight,1))/as.numeric(date-lag(date,1))) %>% mutate(lag = lag(day.change,1)) %>% na.omit()
jonbody$phase <- ifelse(jonbody$date < as.Date("2021-02-01"),"maintain","cut")
suppressMessages(jon <- stan_glmer(day.change ~ lag + (lag | phase), prior_intercept = normal(0,.1), data = jonbody, verbose = F))
n.sims <- 100
days.to.sim <- as.numeric(as.Date("2021-08-01") - max(jonbody$date))
dates <- c(max(jonbody$date)+1:days.to.sim)
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(dates))
for (i in 1:length(dates)){
pb$tick()
if (i==1){projections <- tibble(date = rep(max(jonbody$date)+1, times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = jonbody$day.change[nrow(jonbody)]), draws = n.sims))) %>% mutate(weight = jonbody$weight[nrow(jonbody)] + day.change)}
if(i!=1){next.day <- tibble(date = rep(dates[i], times = n.sims), day.change = as.numeric(posterior_predict(jon, newdata = tibble(phase = "cut", lag = projections$day.change[(nrow(projections)+1-n.sims):(nrow(projections))]), draws = 1))) %>% mutate(weight = projections$weight[(nrow(projections)+1-n.sims):(nrow(projections))] + day.change)
projections <- bind_rows(projections, next.day)
}
}
projections$sim <- rep(1:n.sims, times = days.to.sim)
ggplotly(
ggplot() + geom_line(data=filter(projections, weight > 50), aes(date,weight,group = sim), color = "darkblue", alpha = .2) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 60, alpha = .2) + geom_hline(yintercept = 54, alpha = .2) + theme_minimal()
)
goal <- projections %>% group_by(sim) %>% filter(weight < 67.2) %>% slice(1)
message(white(paste0("Jon's mean kg lost per week: ",round(mean(projections$day.change*7),2))))
message(white(paste0("Jon's median goal date: ",as.character(median(goal$date)))))
ggplotly(
ggplot() + geom_line(data=filter(projections, weight > 60), aes(date,weight,group = sim), color = "darkblue", alpha = .2) + geom_point(data=jonbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 67.2, alpha = .2) + theme_minimal()
)
# Progress
source("~/Downloads/body.R")
print(ggplotly(
ggplot() + geom_line(data=filter(projections, weight > 50), aes(date,weight,group = sim), color = "darkblue", alpha = .2) + geom_point(data=kimbody, aes(date, weight), color = "darkblue") + geom_hline(yintercept = 60, alpha = .2) + geom_hline(yintercept = 54, alpha = .2) + theme_minimal() + labs(title = "Kim")
))
# Progress
source("~/Downloads/body.R")
# FutStat.cat
source("~/Google Drive/Futbol/futstat.R")
