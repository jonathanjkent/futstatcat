final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank == 1) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter(rank < 5) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 17 ) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final$champ.pct <- str_replace(final$champ.pct, "\\b0%", "<1%")
final$champ.pct <- str_replace(final$champ.pct, "100%", ">99%")
final$drop.pct <- str_replace(final$drop.pct, "\\b0%", "<1%")
final$drop.pct <- str_replace(final$drop.pct, "100%", ">99%")
final$playoff.pct <- str_replace(final$playoff.pct, "\\b0%", "<1%")
final$playoff.pct <- str_replace(final$playoff.pct, "100%", ">99%")
final.primera <- final[order(-final$proj.points),]
partits.primera <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.primera, "final-primera.csv", row.names = FALSE)
write.csv(partits.primera, "games-primera.csv", row.names = FALSE)
# Evolucio Table (6/7)
all.projs <- evorerun(results, schedule)
#prev.projs <- read.csv("prog-primera.csv")
#all.projs <- evoupdate(results, schedule, prev.projs)
write.csv(all.projs, "prog-primera.csv", row.names = FALSE)
####### Segona A
# Scrape data
url <- 'https://www.resultados-futbol.com/segunda2020/grupo1/calendario'
webpage <- read_html(url)
local_data <- html_nodes(webpage,'.equipo1') %>%  html_nodes("a") %>% html_attr("href")
vist_data <- html_nodes(webpage,'.equipo2') %>%  html_nodes("a") %>% html_attr("href")
result_data <- html_nodes(webpage,'.rstd') %>% html_text()
dates_data <- html_nodes(webpage,'.fecha') %>% html_text()
# Create data frame
games <- data.frame(home1 = local_data, away1 = vist_data, score = result_data, date = dates_data)
games$score <- as.character.factor(games$score)
games$score <- str_sub(games$score, -11, -7)
home.names <- read.csv("clubnames.csv") %>% select(home1, home)
away.names <- read.csv("clubnames.csv") %>% select(away1, away)
games <- games %>% left_join(home.names, by = "home1") %>% left_join(away.names, by = "away1") %>% select(home, away, score, date)
games$week <- rep(1:42, each = 11)
schedule1 <- subset(games, grepl("x", games$score))
schedule2 <- subset(games, grepl(":", games$score))
schedule3 <- subset(games, grepl("Apl", games$score))
schedule <- rbind(schedule2, schedule1)
schedule <- schedule %>% select(-score, -date)
schedule <- schedule[order(schedule$week),]
results <- subset(games, grepl("-", games$score))
results <- subset(results, !grepl("x", results$score))
results <- results %>% separate(score, c("home.score", "away.score"))
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Create date variable
results <- daterecode(results)
# Dixon-Coles Ratings Model
weights <- weights_dc(results$date, xi=xi.set)
gm_res <- goalmodel(goals1 = results$home.score, goals2 = results$away.score,
team1 = results$home, team2=results$away, weights = weights, rs=TRUE)
# Dixon-Coles Game-by-Game Predictions
predictions <- predict_result(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# Add week back
games$key <- paste(games$home, games$away, sep="")
predictions$key <- paste(predictions$team1, predictions$team2, sep="")
predictions <- predictions %>% left_join(games, by = "key") %>% select(week, team1, p1, pd, p2, team2)
## Calculate Predicated GD
goal.preds <- predict_expg(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
gd <- gdcalc(goal.preds, results)
# Current Table
table.all <- currenttable(results)
table.all <- table.all %>% left_join(gd, by = "team")
# Team Ratings vs. Average
ratings <- teamrates(table.all, gm_res)
# Simulation (7/7)
all.sims <- simseason(predictions, table.all, i.sim)
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank < 3) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter((rank > 2) & (rank < 7)) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 18 ) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final$champ.pct <- str_replace(final$champ.pct, "\\b0%", "<1%")
final$champ.pct <- str_replace(final$champ.pct, "100%", ">99%")
final$drop.pct <- str_replace(final$drop.pct, "\\b0%", "<1%")
final$drop.pct <- str_replace(final$drop.pct, "100%", ">99%")
final$playoff.pct <- str_replace(final$playoff.pct, "\\b0%", "<1%")
final$playoff.pct <- str_replace(final$playoff.pct, "100%", ">99%")
final.sega <- final[order(-final$proj.points),]
partits.sega <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.sega, "final-sega.csv", row.names = FALSE)
write.csv(partits.sega, "games-sega.csv", row.names = FALSE)
# Evolucio Table (7/7)
all.projs <- evorerun(results, schedule)
#prev.projs <- read.csv("prog-sega.csv")
#all.projs <- evoupdate(results, schedule, prev.projs)
write.csv(all.projs, "prog-sega.csv", row.names = FALSE)
############################
########## Website #########
############################
####### Render Site
library(blogdown)
library(rmarkdown)
setwd("~/Google Drive/Futbol/futstatcat")
render_site()
serve_site()
library(readr)
library(tidyverse)
library(plotly)
library(ggplot2)
library(htmlwidgets)
## I'm not sure if all of those are needed but just install any of those you don't alrady have
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
## Select just Iran and make the predications
iran <- D %>% subset(country == "Iran")
View(iran)
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-19"), units = "days")))
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-20"), units = "days")))
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-19"), units = "days")))
# Linear regression of the log of cases to find the growth rate
model <- lm(log(cases)~days, data=iran)
# Use that rate to predict the future (if you want to do more than 10 days ahead, change the two 10 below)
future <- tibble(cases=last(iran$cases)*exp(model$coef[2]*1:10), date=last(iran$date) + 1:10, type="projected")
View(future)
View(future)
# Use that rate to predict the future (if you want to do more than 5 days ahead, change the two 5s below)
future <- tibble(cases=last(iran$cases)*exp(model$coef[2]*1:5), date=last(iran$date) + 1:5, type="projected")
View(future)
# Combine the actual cases with the projected ones
iran$type <- "actual"
View(future)
iran <- iran %>% select(cases, date, type)
iran <- rbind(iran, future)
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "Iran")
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Create a variable that sets the first day as day 0 and then counts up
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-19"), units = "days")))
# Linear regression of the log of cases to find the growth rate
model <- lm(log(cases)~days, data=iran)
# Use that rate to predict the future
# If you want to do more than 5 days ahead, change the two 5s below but
# hopefully the rate will keep going down and this assumes it won't
future <- tibble(cases=last(iran$cases)*exp(model$coef[2]*1:5), date=last(iran$date) + 1:5, type="projected")
# Combine the actual cases with the projected ones
iran$type <- "actual"
iran <- iran %>% select(cases, date, type)
View(iran)
View(future)
View(iran)
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "Iran")
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Create a variable that sets the first day as day 0 and then counts up
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-19"), units = "days")))
# Linear regression of the log of cases to find the growth rate
model <- lm(log(cases)~days, data=iran)
# Use that rate to predict the future
# If you want to do more than 5 days ahead, change the two 5s below but
# hopefully the rate will keep going down and this assumes it won't
future <- tibble(cases=last(iran$cases)*exp(model$coef[2]*1:5), date=last(iran$date) + 1:5, type="projected", country="Iran")
# Combine the actual cases with the projected ones
iran$type <- "actual"
iran <- iran %>% select(cases, date, type)
iran <- rbind(iran, future)
View(iran)
library(readr)
library(tidyverse)
library(plotly)
library(ggplot2)
library(htmlwidgets)
## I'm not sure if all of those are needed but just install any of those you don't alrady have
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "Iran")
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Create a variable that sets the first day as day 0 and then counts up
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-19"), units = "days")))
# Linear regression of the log of cases to find the growth rate
model <- lm(log(cases)~days, data=iran)
# Use that rate to predict the future
# If you want to do more than 5 days ahead, change the two 5s below but
# hopefully the rate will keep going down and this assumes it won't
future <- tibble(cases=last(iran$cases)*exp(model$coef[2]*1:5), date=last(iran$date) + 1:5, type="projected", country="Iran")
# Combine the actual cases with the projected ones
iran$type <- "actual"
View(iran)
iran <- iran %>% select(-country)
#Select just Iran
iran <- D %>% subset(country == "Iran") %>% ungroup()
View(iran)
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "Iran") %>% ungroup()
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Create a variable that sets the first day as day 0 and then counts up
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-19"), units = "days")))
# Linear regression of the log of cases to find the growth rate
model <- lm(log(cases)~days, data=iran)
# Use that rate to predict the future
# If you want to do more than 5 days ahead, change the two 5s below but
# hopefully the rate will keep going down and this assumes it won't
future <- tibble(cases=last(iran$cases)*exp(model$coef[2]*1:5), date=last(iran$date) + 1:5, type="projected", country="Iran")
View(future)
# Combine the actual cases with the projected ones
iran$type <- "actual"
iran <- iran %>% select(-country)
View(iran)
View(future)
library(readr)
library(tidyverse)
library(plotly)
library(ggplot2)
library(htmlwidgets)
## I'm not sure if all of those are needed but just install any of those you don't alrady have
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "Iran") %>% ungroup()
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Create a variable that sets the first day as day 0 and then counts up
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-19"), units = "days")))
# Linear regression of the log of cases to find the growth rate
model <- lm(log(cases)~days, data=iran)
# Use that rate to predict the future
# If you want to do more than 5 days ahead, change the two 5s below but
# hopefully the rate will keep going down and this assumes it won't
future <- tibble(cases=last(iran$cases)*exp(model$coef[2]*1:5), date=last(iran$date) + 1:5, type="projected")
# Combine the actual cases with the projected ones
iran$type <- "actual"
iran <- iran %>% select(-country, -days)
iran <- rbind(iran, future)
View(iran)
# Make an graph (to easily save as an image)
plot <- ggplot(iran,aes(date, cases, color = type)) + geom_line()
ggplot(iran,aes(date, cases, color = type)) + geom_line()
ggplotly(plot)
View(iran)
library(readr)
library(tidyverse)
library(plotly)
library(ggplot2)
library(htmlwidgets)
## I'm not sure if all of those are needed but just install any of those you don't alrady have
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "Iran") %>% ungroup()
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Add today
iran <- rbind(iran, c("Iran", 2020-03-09, 8042))
# Add today
iran <- rbind(iran, c("Iran", "2020-03-09", 8042))
View(iran)
# Add today
iran <- rbind(iran, c("Iran", "2020-03-10", 8042))
iran$cases <- as.numeric(iran$cases)
# Create a variable that sets the first day as day 0 and then counts up
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-19"), units = "days")))
# Linear regression of the log of cases to find the growth rate
model <- lm(log(cases)~days, data=iran)
# Use that rate to predict the future
# If you want to do more than 5 days ahead, change the two 5s below but
# hopefully the rate will keep going down and this assumes it won't
future <- tibble(cases=last(iran$cases)*exp(model$coef[2]*1:5), date=last(iran$date) + 1:5, type="projected")
View(future)
iran$type <- "actual"
iran <- iran %>% select(-country, -days)
iran <- rbind(iran, future)
# Make an graph (to easily save as an image)
ggplot(iran,aes(date, cases, color = type)) + geom_line()
# Make an interactive one
plot <- ggplot(iran,aes(date, cases, color = type)) + geom_line()
ggplotly(plot)
View(iran)
library(readr)
library(tidyverse)
library(plotly)
library(ggplot2)
library(htmlwidgets)
## I'm not sure if all of those are needed but just install any of those you don't alrady have
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "Iran") %>% ungroup()
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Add today
iran <- rbind(iran, c("Iran", as.Date(2020-03-10), as.numeric(8042)))
# Add today
iran <- rbind(iran, c("Iran", as.Date("2020-03-10"), as.numeric(8042)))
# Add today
iran <- rbind(iran, c("Iran", as.Date("3/10/2020",format="%m/%d/%y"), as.numeric(8042)))
# Add today
iran <- rbind(iran, c("Iran", as.Date("03/10/2020",format="%m/%d/%y"), as.numeric(8042)))
# Add today
iran <- rbind(iran, c("Iran", as.Date(03/10/2020,format="%m/%d/%y"), as.numeric(8042)))
# Add today
iran <- rbind(iran, c("Iran", as.Date("3/10/20",format="%m/%d/%y"), as.numeric(8042)))
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases")
View(D)
# Add today
iran <- rbind(iran, c("Iran", "3/10/20", 8042))
iran$cases <- as.numeric(iran$cases)
# Add today
iran <- rbind(iran, c("Iran", "2020-03-09", 8042))
library(readr)
library(tidyverse)
library(plotly)
library(ggplot2)
library(htmlwidgets)
## I'm not sure if all of those are needed but just install any of those you don't alrady have
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "Iran") %>% ungroup()
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Add today
iran <- rbind(iran, c("Iran", "2020-03-09", 8042))
iran$cases <- as.numeric(iran$cases)
iran$date <- as.Date(iran$date)
library(readr)
library(tidyverse)
library(plotly)
library(ggplot2)
library(htmlwidgets)
## I'm not sure if all of those are needed but just install any of those you don't alrady have
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "Iran") %>% ungroup()
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Add today
iran <- rbind(iran, c("Iran", "2020-03-09", 8042))
iran$cases <- as.numeric(iran$cases)
iran$date <- as.Date(iran$date)
View(iran)
library(readr)
library(tidyverse)
library(plotly)
library(ggplot2)
library(htmlwidgets)
## I'm not sure if all of those are needed but just install any of those you don't alrady have
# Read in and tidy data (this is just a bunch of tinkering John did with the original data)
D = read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_19-covid-Confirmed.csv") %>%
mutate("country"=`Country/Region`) %>%
select(-one_of("Province/State", "Country/Region", "Lat", "Long")) %>%
pivot_longer(-country, names_to="date", values_to="cases") %>%
mutate(date=as.Date(date, format="%m/%d/%y")) %>%
group_by(country, date) %>%
summarise(cases=sum(cases))
#Select just Iran
iran <- D %>% subset(country == "Iran") %>% ungroup()
# Remove obsevations before there were any cases
iran <- iran %>% subset(cases > 0)
# Add today
iran <- rbind(iran, c("Iran", "2020-03-10", 8042))
iran$cases <- as.numeric(iran$cases)
iran$date <- as.Date(iran$date)
# Create a variable that sets the first day as day 0 and then counts up
iran <- iran %>% mutate(days=as.integer(difftime(date, as.Date("2020-02-19"), units = "days")))
# Linear regression of the log of cases to find the growth rate
model <- lm(log(cases)~days, data=iran)
# Use that rate to predict the future
# If you want to do more than 5 days ahead, change the two 5s below but
# hopefully the rate will keep going down and this assumes it won't
future <- tibble(cases=last(iran$cases)*exp(model$coef[2]*1:5), date=last(iran$date) + 1:5, type="projected")
View(future)
View(iran)
View(future)
iran$type <- "actual"
iran <- iran %>% select(-country, -days)
iran <- rbind(iran, future)
# Make an graph (to easily save as an image)
ggplot(iran,aes(date, cases, color = type)) + geom_line()
# Make an interactive one
plot <- ggplot(iran,aes(date, cases, color = type)) + geom_line()
ggplotly(plot)
View(iran)
View(iran)
library(ggplot2)
###### Created featured image
prog <- read.csv("~/Google Drive/Futbol/prog-3aG5.csv")
prog$points <- round(prog$points, digits = 1)
colnames(prog)[1] <- 'Club'
colnames(prog)[2] <- 'Punts.Projectats'
colnames(prog)[3] <- 'Jornada'
prog <- prog %>% subset(Club == "L'Hospitalet" | Club == "Sant Andreu" | Club == "Europa" | Club == "Terrassa")
ggplot(prog,aes(Jornada, Punts.Projectats, color = Club)) + geom_line() +
labs(y = "Punts Projectats") +
theme_classic(base_size = 20)
#  ylim(65,85) +
library(blogdown)
library(rmarkdown)
setwd("~/Google Drive/Futbol/futstatcat")
render_site()
library(blogdown)
library(rmarkdown)
setwd("~/Google Drive/Futbol/futstatcat")
render_site()
serve_site()
