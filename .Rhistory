city_data[63,1] <- "Vilanova i la Geltrú"
city_data[64,1] <- "Prat de Llobregat, El"
city_data[65,1] <- "Línea de la Concepción, La"
city_data[66,1] <- "Cornellà de Llobregat"
View(municipalities)
city_data[63,1] <- "Vilanova i la Geltrú"
city_data[64,1] <- "Prat de Llobregat, El"
city_data[65,1] <- "Línea de la Concepción, La"
city_data[66,1] <- "Cornellà de Llobregat"
city_data[74,1] <- "Santa Lucía de Tirajana"
city_data[75,1] <- "Mollet del Vallès"
city_data[78,1] <- "Móstoles"
city_data[84,1] <- "Donostia-San Sebastián"
city_data[85,1] <- "Alcalá de Henares"
city_data[87,1] <- "Leganés"
city_data[88,1] <- "Almería"
city_data[91,1] <- "Alcorcón"
city_data[94,1] <- "Castellón de la Plana/Castelló de la Plana"
city_data[96,1] <- "Cádiz"
city_data[97,1] <- "León"
city_data[6,1] <- "Málaga"
city_data[8,1] <- "Palmas de Gran Canaria, Las"
city_data[10,1] <- "Palma"
city_data[12,1] <- "Vitoria-Gasteiz"
city_data[14,1] <- "Pamplona/Iruña"
city_data[18,1] <- "Logroño"
city_data[20,1] <- "Córdoba"
city_data[23,1] <- "Gijón"
city_data[24,1] <- "Hospitalet de Llobregat, L'"
city_data[26,1] <- "Coruña, A"
city_data[34,1] <- "Cáceres"
city_data[36,1] <- "Pozuelo de Alarcón"
city_data[37,1] <- "Puerto de Santa María, El"
city_data[39,1] <- "Avilés"
city_data[47,1] <- "Rozas de Madrid, Las"
city_data[49,1] <- "Sant Cugat del Vallès"
city_data[52,1] <- "Rubí"
city_data[58,1] <- "San Sebastián de los Reyes"
city_data[61,1] <- "Cerdanyola del Vallès"
city_data[62,1] <- "Sanlúcar de Barrameda"
city_data[63,1] <- "Vilanova i la Geltrú"
city_data[64,1] <- "Prat de Llobregat, El"
city_data[65,1] <- "Línea de la Concepción, La"
city_data[66,1] <- "Cornellà de Llobregat"
city_data[74,1] <- "Santa Lucía de Tirajana"
city_data[75,1] <- "Mollet del Vallès"
city_data[78,1] <- "Móstoles"
city_data[84,1] <- "Donostia-San Sebastián"
city_data[85,1] <- "Alcalá de Henares"
city_data[87,1] <- "Leganés"
city_data[88,1] <- "Almería"
city_data[91,1] <- "Alcorcón"
city_data[94,1] <- "Castellón de la Plana/Castelló de la Plana"
city_data[96,1] <- "Cádiz"
city_data[97,1] <- "León"
city_data[98,1] <- "San Cristóbal de La Laguna"
city_data[101,1] <- "Jaén"
city_data[104,1] <- "Mataró"
city_data[108,1] <- "Torrejón de Ardoz"
city_data[110,1] <- "Alcalá de Guadaíra"
city_data[111,1] <- "Alcoy/Alcoi"
city_data[112,1] <- "Ávila"
city_data[113,1] <- "Benalmádena"
city_data[120,1] <- "Mérida"
city_data[121,1] <- "Sagunto/Sagunt"
city_data <- city_data %>% left_join(municipalities, by = "NMUN")
summary(city_data)
ggplot() +
geom_point(data = city_data), aes(tertiary.edu, bt_vs_tweets)) +
geom_smooth(data = districts, aes(tertiary.edu, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data), aes(tertiary.edu, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(tertiary.edu, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(tertiary.edu, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(tertiary.edu, bt_vs_tweets)), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(tertiary.edu, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(tertiary.edu, bt_vs_tweets), method = 'lm')) +
theme_minimal()
geom_smooth(data = city_data, aes(tertiary.edu, bt_vs_tweets, method = 'lm') +
ggplot() +
geom_point(data = city_data, aes(tertiary.edu, bt_vs_tweets))
ggplot() +
geom_point(data = city_data, aes(tertiary.edu, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(tertiary.edu, bt_vs_tweets, method = 'lm')) +
theme_minimal()
summary(lm(bt_vs_tweets~tertiary.edu, data=city_data))
ggplot() +
geom_point(data = city_data, aes(tertiary.edu, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(tertiary.edu, bt_vs_tweets, method = 'loess')) +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(tertiary.edu, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(tertiary.edu, bt_vs_tweets, method = 'lm')) +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(tertiary.edu, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(tertiary.edu, bt_vs_tweets), method = 'lm') +
theme_minimal()
names(city_data)
ggplot() +
geom_point(data = city_data, aes(cont.urban.fabric, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(cont.urban.fabric, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(green.urban, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(green.urban, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(ind.comm.mil, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(ind.comm.mil, bt_vs_tweets), method = 'lm') +
theme_minimal()
city_data$covered <- city_data$cont.urban.fabric + city_data$discont.urban.fabric + city_data$ind.comm.mil + city_data$transport + city_data$other
ggplot() +
geom_point(data = city_data, aes(covered, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(covered, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(ind.comm.mil, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(ind.comm.mil, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(natural, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(natural, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(green.urban, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(green.urban, bt_vs_tweets), method = 'lm') +
theme_minimal()
View(city_data)
head(city_data %>% arrange(covered))
head(city_data %>% arrange(covered) %>% select(NMUN, covered))
tail(city_data %>% arrange(covered) %>% select(NMUN, covered))
(city_data %>% arrange(covered) %>% select(NMUN, covered))
(city_data %>% arrange(desc(covered)) %>% select(NMUN, covered))
(city_data %>% arrange(desc(agricultural)) %>% select(NMUN, covered))
(city_data %>% arrange(desc(agricultural)) %>% select(NMUN, agricultural))
ggplot() +
geom_point(data = city_data, aes(agricultural, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(agricultural, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(natural, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(natural, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(tertiary.edu, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(tertiary.edu, bt_vs_tweets), method = 'lm') +
theme_minimal()
# Check on Fede's question
municipalities <- municipalities %>% arrange(desc(income))
summary(municipalities$income)
nrow(municipalities)-6903
municipalities$income.rank <- NA
municipalities$income.rank[1:1198] <- 1:1198
municipalities %>% select(NMUN, income, income.rank)
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income.rank, bt_vs_tweets)) +
geom_smooth(data = municipalities, aes(income.rank, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0), aes(income.rank, bt_vs_tweets)) +
geom_smooth(data = municipalities, aes(income.rank, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income.rank, bt_vs_tweets)) +
geom_smooth(data = municipalities, aes(income.rank, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
municipalities$bt_vs_tweets_absolute <- abs(municipalities$bt_vs_tweets)
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income.rank, bt_vs_tweets_absolute)) +
geom_smooth(data = municipalities, aes(income.rank, bt_vs_tweets_absolute), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income, bt_vs_tweets_absolute)) +
geom_smooth(data = municipalities, aes(income, bt_vs_tweets_absolute), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income.rank, bt_vs_tweets_absolute)) +
geom_smooth(data = municipalities, aes(income.rank, bt_vs_tweets_absolute), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income, bt_vs_tweets_absolute)) +
geom_smooth(data = municipalities, aes(income, bt_vs_tweets_absolute), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income.rank, bt_vs_tweets_absolute)) +
geom_smooth(data = municipalities, aes(income.rank, bt_vs_tweets_absolute), method = 'lm') +
theme_minimal() + labs(x="",y="") + scale_x_reverse()
municipalities$bt_vs_pop_absolute <- abs(municipalities$bt_vs_pop)
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income.rank, bt_vs_pop_absolute)) +
geom_smooth(data = municipalities, aes(income.rank, bt_vs_pop_absolute), method = 'lm') +
theme_minimal() + labs(x="",y="") + scale_x_reverse()
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income, bt_vs_pop_absolute)) +
geom_smooth(data = municipalities, aes(income, bt_vs_pop_absolute), method = 'lm') +
theme_minimal() + labs(x="",y="") + scale_x_reverse()
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income, bt_vs_tweets_absolute)) +
geom_smooth(data = municipalities, aes(income, bt_vs_tweets_absolute), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income, bt_vs_tweets_absolute)) +
geom_smooth(data = municipalities, aes(income, bt_vs_tweets_absolute), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = municipalities %>% filter(tw_count > 0 & bt_vs_tweets < .02 & bt_vs_tweets > -.02), aes(income.rank, bt_vs_tweets_absolute)) +
geom_smooth(data = municipalities, aes(income.rank, bt_vs_tweets_absolute), method = 'lm') +
theme_minimal() + labs(x="",y="") + scale_x_reverse()
ggplot() +
geom_point(data = city_data, aes(covered, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(covered, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(natural, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(natural, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(agricultural, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(agricultural, bt_vs_tweets), method = 'lm') +
theme_minimal()
ggplot() +
geom_point(data = city_data, aes(tertiary.edu, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(tertiary.edu, bt_vs_tweets), method = 'lm') +
theme_minimal()
city_data$urban.fabric <- city_data$cont.urban.fabric + city_data$discont.urban.fabric
# To use
ggplot() +
geom_point(data = city_data, aes(urban.fabric, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(urban.fabric, bt_vs_tweets), method = 'lm') +
theme_minimal()
# To use
ggplot() +
geom_point(data = city_data, aes(cont.urban.fabric, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(cont.urban.fabric, bt_vs_tweets), method = 'lm') +
theme_minimal()
summary(lm(bt_vs_tweets~cont.urban.fabric, data=city_data))
ggplot() +
geom_point(data = city_data, aes(covered, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(covered, bt_vs_tweets), method = 'lm') +
theme_minimal()
# To use
ggplot() +
geom_point(data = city_data, aes(cont.urban.fabric, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(cont.urban.fabric, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = city_data, aes(covered, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(covered, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = city_data, aes(natural, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(natural, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = city_data, aes(agricultural, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(agricultural, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = city_data, aes(ind.comm.mil, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(ind.comm.mil, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
suppressMessages(library(blogdown))
suppressMessages(library(rmarkdown))
suppressMessages(library(tidyverse))
suppressMessages(library(rvest))
suppressMessages(library(elo))
suppressMessages(library(scales))
options(dplyr.summarise.inform=F)
setwd("~/Google Drive/KBO")
## Scrape 2020 Schedule and Results
links <- read_csv("mykboweeks.csv", col_types = cols())
links$date <- as.Date(str_sub(links$url,-10,-1))
links <- links %>% filter(date < (Sys.Date()+1))
links <- links$url
all.results <- NA
for (i in links){
print(paste0("Scraping: ",i))
url <- i
week <- substring(url, first = 38)
d <- read_html(url) %>% html_table() %>% as.data.frame() %>% select(-X2, -X4)
d <- d[2:(nrow(d)-1),]
d <- d %>% filter(str_detect(X1, "2020") == F)
d <- d %>% separate(X1, c("away1", "away2"), extra = "drop")
d <- d %>% separate(X5, c("home1", "home2"), extra = "drop")
d <- d %>% separate(X3, c("A.Score", "H.Score"), extra = "drop")
d$Away <- paste(d$away1, d$away2)
d$Home <- paste(d$home1, d$home2)
d$week <- as.Date(week)
d$Year <- 2020
d$addday <- rep(0:6, each = 5, length.out = nrow(d))
d$Date <- as.Date(d$week + d$addday)
results <- d %>% filter(!str_detect(H.Score, "0am") & !str_detect(A.Score, "Canceled")) %>% select(Date, Home, Away, H.Score, A.Score, Year)
all.results <- rbind(all.results, results)
}
all.results <- all.results[2:nrow(all.results),]
## Read In Historical Results
kbohistory <- read_csv("kboresults.csv", col_types = cols())
kbohistory$Date <- ISOdate(kbohistory$Year, kbohistory$Month, kbohistory$Day)
kbohistory <- kbohistory %>% select(Date, Home, Away, H.Score, A.Score, Year)
all.history <- rbind(kbohistory, all.results)
all.history <- all.history[order(all.history$Date),]
all.history$H.Score <- as.double(all.history$H.Score)
all.history$A.Score <- as.double(all.history$A.Score)
View(all.history)
## Run Elo
print("Running model...")
elo <- elo.run(score(H.Score, A.Score) ~ adjust(Home, 24) + Away + regress(Year, 1500, 0.5) + k(4*(abs(H.Score - A.Score)^(1/4))), data = all.history)
all.history$H.Elo <- elo[[1]][,7]
all.history$A.Elo <- elo[[1]][,8]
## Create Elo History Table
home <- all.history %>% select(Date, Home, H.Elo)
away <- all.history %>% select(Date, Away, A.Elo)
cols <- c("Date", "Team", "Elo")
colnames(home) <- cols
colnames(away) <- cols
elo.history <- rbind(home,away)
elo.history$Elo <- round(elo.history$Elo, digits = 0)
## Current Elos
current.elos <- elo.history %>%
group_by(Team) %>%
arrange(desc(Date)) %>%
slice(1) %>% select(-Date) %>%
arrange(desc(Elo))
current.elos$Rank <- 1:10
write_csv(current.elos, "currentelos.csv")
## Ten Team Era for History Page
elo.history$Date <- as.Date(elo.history$Date)
tenteam <- elo.history %>% filter(Date > as.Date("2013-01-01"))
write_csv(tenteam,"elohistory.csv")
# Update Elo page
predictions <- read_csv("predictions.csv", col_types = cols()) %>% select(-Elo, -Rank)
predictions <- predictions %>% left_join(current.elos, by = "Team") %>% select(Rank, Team, Elo, everything())
write_csv(predictions, "predictions.csv")
## Playoffs
all.presults <- NA
psim <- 10000
print("Simulating playoffs...")
for (i in 1:psim){
if (i %% 500 == 0){print(percent(i/psim))}
seed1 <- "NC Dinos"
seed2 <- "KT Wiz"
seed3 <- "Doosan Bears"
seed4 <- "LG Twins"
seed5 <- "Kiwoom Heroes"
# Wild Card Round
#psked <- data.frame(seed4,seed5)
#psked <- rbind(psked,psked,psked)
#names(psked) <- c("Home","Away")
#psked$Prediction <- predict(elo, newdata = psked)
#psked$Sim <- runif((nrow(psked)),0,1)
#psked[1,4] <- 1
#psked <- mutate(psked, Winner = ifelse(Sim > Prediction, as.character(Home), as.character(Away)))
#wc <- row.names(data.frame(sort(table(psked$Winner),decreasing=TRUE)[1]))
#fifth <- ifelse(wc == seed4, seed5, seed4)
wc <- seed4
fifth <- seed5
# Semi-Playoff
psked <- data.frame(seed3,wc)
names(psked) <- c("Home","Away")
away <- data.frame(wc,seed3)
names(away) <- c("Home","Away")
psked <- rbind(psked,psked,away)
psked$Prediction <- predict(elo, newdata = psked)
psked$Sim <- runif((nrow(psked)),0,1)
psked <- mutate(psked, Winner = ifelse(Sim > Prediction, as.character(Home), as.character(Away)))
po <- row.names(data.frame(sort(table(psked$Winner),decreasing=TRUE)[1]))
fourth <- ifelse(po == seed3, wc, seed3)
# Playoff
psked <- data.frame(seed2,po)
names(psked) <- c("Home","Away")
away <- data.frame(po,seed2)
names(away) <- c("Home","Away")
psked <- rbind(psked,psked,psked,away,away)
psked$Prediction <- predict(elo, newdata = psked)
psked$Sim <- runif((nrow(psked)),0,1)
psked <- mutate(psked, Winner = ifelse(Sim > Prediction, as.character(Home), as.character(Away)))
series <- row.names(data.frame(sort(table(psked$Winner),decreasing=TRUE)[1]))
third <- ifelse(series == seed2, po, seed2)
# Korean Series
psked <- data.frame(seed1,series)
names(psked) <- c("Home","Away")
away <- data.frame(series,seed1)
names(away) <- c("Home","Away")
psked <- rbind(psked,psked,psked,psked,psked,away,away)
psked$Prediction <- predict(elo, newdata = psked)
psked$Sim <- runif((nrow(psked)),0,1)
psked <- mutate(psked, Winner = ifelse(Sim > Prediction, as.character(Home), as.character(Away)))
first <- row.names(data.frame(sort(table(psked$Winner),decreasing=TRUE)[1]))
second <- ifelse(first == seed1, series, seed1)
# Results
teams <- c(first,second,third,fourth,fifth)
rank <- 1:5
presults <- data.frame(teams,rank)
all.presults <- rbind(all.presults, presults)
}
all.presults <- all.presults[2:nrow(all.presults),]
print("Tallying simulations...")
play.1 <- all.presults %>% filter(rank == 1) %>% group_by(teams) %>% count()
play.1$Pct <- (play.1$n/psim)
colnames(play.1) <- c("Winner", "n", "First")
play.2 <- all.presults %>% filter(rank == 2) %>% group_by(teams) %>% count()
play.2$Pct <- (play.2$n/psim)
colnames(play.2) <- c("Winner", "n", "Second")
play.3 <- all.presults %>% filter(rank == 3) %>% group_by(teams) %>% count()
play.3$Pct <- (play.3$n/psim)
colnames(play.3) <- c("Winner", "n", "Third")
play.4 <- all.presults %>% filter(rank == 4) %>% group_by(teams) %>% count()
play.4$Pct <- (play.4$n/psim)
colnames(play.4) <- c("Winner", "n", "Fourth")
play.5 <- all.presults %>% filter(rank == 5) %>% group_by(teams) %>% count()
play.5$Pct <- (play.5$n/psim)
colnames(play.5) <- c("Winner", "n", "Fifth")
playoffs <- data.frame(unique(all.presults$teams))
names(playoffs) <- "Winner"
playoffs <- play.5 %>% select(-n) %>% right_join(playoffs, by = "Winner")
playoffs <- play.4 %>% select(-n) %>% right_join(playoffs, by = "Winner")
playoffs <- play.3 %>% select(-n) %>% right_join(playoffs, by = "Winner")
playoffs <- play.2 %>% select(-n) %>% right_join(playoffs, by = "Winner")
playoffs <- play.1 %>% select(-n) %>% right_join(playoffs, by = "Winner")
names(playoffs)[1:2] <- c("Team","Champion")
playoffs <- current.elos %>% right_join(playoffs, by = "Team") %>% select(-Rank)
playoffs <- playoffs %>%
arrange(desc(Champion)) %>%
mutate(Champion = percent(Champion, 1)) %>%
mutate(Second = percent(Second, 1)) %>%
mutate(Third = percent(Third, 1)) %>%
mutate(Fourth = percent(Fourth, 1)) %>%
mutate(Fifth = percent(Fifth, 1))
playoffs[is.na(playoffs)] <- "0%"
write_csv(playoffs, "~/Google Drive/KBO/playoffsims.csv")
## Homepage image
print("Updating pages...")
setwd("~/kbofancystats/static/img")
tenteam <- read_csv("~/Google Drive/KBO/elohistory.csv", col_types = cols())
tenteam <- tenteam %>% subset(Date > as.Date("2020-01-01"))
tenteam$Team <- as.factor(tenteam$Team)
rank <- read_csv("~/Google Drive/KBO/currentelos.csv", col_types = cols())
rank$Team2 <- paste0(rank$Team, " (",rank$Elo,")")
levels <- rank$Team2
tenteam <- tenteam %>% left_join(rank, by = "Team")
tenteam$Team2 <- as.factor(tenteam$Team2)
tenteam$Team2 <- factor(tenteam$Team2, levels = levels)
plot <- ggplot() + geom_line(data = tenteam, aes(Date, Elo.x, color = Team2)) + theme_minimal() + labs(x = "", y = "Elo", color = "")
ggsave("elo.png", width = 8, height = 3)
# Refresh Pages
to_update <- c("~/kbofancystats/content/elo2020.Rmd",
"~/kbofancystats/content/elohistory.Rmd",
"~/kbofancystats/content/elo.Rmd",
"~/kbofancystats/content/playoffs.Rmd")
for (i in to_update){
temp <- read_file(i)
write_file(temp,i)
}
## Start site
setwd("~/kbofancystats")
serve_site()
city_data$urban.fabric.ratio <- city_data$cont.urban.fabric / (city_data$cont.urban.fabric + city_data$discont.urban.fabric)
# To use
ggplot() +
geom_point(data = city_data, aes(urban.fabric.ratio, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(urban.fabric.ratio, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = city_data, aes(ind.comm.mil, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(ind.comm.mil, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = city_data, aes(ind.comm.mil, bt_vs_pop)) +
geom_smooth(data = city_data, aes(ind.comm.mil, bt_vs_pop), method = 'lm') +
theme_minimal() + labs(x="",y="")
# To use
ggplot() +
geom_point(data = city_data, aes(urban.fabric.ratio, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(urban.fabric.ratio, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = city_data, aes(ind.comm.mil, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(ind.comm.mil, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = city_data, aes(agricultural, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(agricultural, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = city_data, aes(natural, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(natural, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
ggplot() +
geom_point(data = city_data, aes(ind.comm.mil, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(ind.comm.mil, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
# To use
ggplot() +
geom_point(data = city_data, aes(urban.fabric.ratio, bt_vs_tweets)) +
geom_smooth(data = city_data, aes(urban.fabric.ratio, bt_vs_tweets), method = 'lm') +
theme_minimal() + labs(x="",y="")
View(bgtracks)
table(bgtracks$year)
# CCAA Analysis: no added value using tweets, no relationship w/ income
cor(communities$bt_vs_pop, communities$bt_vs_tweets)
# Muni Analysis: Pop & tweets not as closely correlated, still no relation w/ income
cor(municipalities$bt_vs_pop, municipalities$bt_vs_tweets, use = "complete.obs")
# FutStat.cat
source("~/Google Drive/Futbol/futstat.R")
# FutStat.cat
source("~/Google Drive/Futbol/futstat.R")
