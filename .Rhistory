mutate(p2 = percent(p2, 2))
write.csv(final.3aG5, "final-3aG5.csv", row.names = FALSE)
write.csv(partits.3aG5, "games-3aG5.csv", row.names = FALSE)
# Evolucio Table (1/7)
#all.projs <- evorerun(results, schedule)
prev.projs <- read.csv("prog-3aG5.csv")
all.projs <- evoupdate(results, schedule, prev.projs)
write.csv(all.projs, "prog-3aG5.csv", row.names = FALSE)
####### Segona B Grup 3
# Scrape data
url <- 'https://www.resultados-futbol.com/segundab2020/grupo3/calendario'
webpage <- read_html(url)
local_data <- html_nodes(webpage,'.equipo1') %>%  html_nodes("a") %>% html_attr("href")
vist_data <- html_nodes(webpage,'.equipo2') %>%  html_nodes("a") %>% html_attr("href")
result_data <- html_nodes(webpage,'.url') %>% html_text(result_data)
dates_data <- html_nodes(webpage,'.fecha') %>% html_text(dates_data)
# Create data frame
games <- data.frame(home1 = local_data, away1 = vist_data, score = result_data, date = dates_data)
home.names <- read.csv("clubnames.csv") %>% select(home1, home)
away.names <- read.csv("clubnames.csv") %>% select(away1, away)
games <- games %>% left_join(home.names, by = "home1") %>% left_join(away.names, by = "away1") %>% select(home, away, score, date)
games$week <- rep(1:38, each = 10)
schedule1 <- subset(games, grepl("x", games$score))
schedule2 <- subset(games, grepl(":", games$score))
schedule <- rbind(schedule2, schedule1)
schedule <- schedule %>% select(-score, -date)
schedule <- schedule[order(schedule$week),]
results <- subset(games, grepl("-", games$score))
results <- subset(results, !grepl("x", results$score))
results <- results %>% separate(score, c("home.score", "away.score"))
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Create date variable
results <- daterecode(results)
# Dixon-Coles Ratings Model
weights <- weights_dc(results$date, xi=0.002)
gm_res <- goalmodel(goals1 = results$home.score, goals2 = results$away.score,
team1 = results$home, team2=results$away, weights = weights, dc=TRUE)
ratings <- as.data.frame(gm_res$parameters)
ratings <- rownames_to_column(ratings, "team")
ratings$off.rank <- rank(-ratings$attack, ties.method = "random")
ratings$def.rank <- rank(-ratings$defense, ties.method = "random")
# Dixon-Coles Game-by-Game Predictions
predictions <- predict_result(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# Add week back
games$key <- paste(games$home, games$away, sep="")
predictions$key <- paste(predictions$team1, predictions$team2, sep="")
predictions <- predictions %>% left_join(games, by = "key") %>% select(week, team1, p1, pd, p2, team2)
## Calculate Predicated GD
goal.preds <- predict_expg(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
gd <- gdcalc(goal.preds, results)
# Current Table
table.all <- currenttable(results)
table.all <- table.all %>% left_join(gd, by = "team")
# Simulation (2/7)
all.sims <- simseason(predictions, table.all, i.sim)
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank == 1) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter((rank < 5) | (rank == 16)) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 16) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final.2aBG3 <- final[order(-final$proj.points),]
partits.2aBG3 <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.2aBG3, "final-2aBG3.csv", row.names = FALSE)
write.csv(partits.2aBG3, "games-2aBG3.csv", row.names = FALSE)
# Evolucio Table (2/7)
#all.projs <- evorerun(results, schedule)
prev.projs <- read.csv("prog-2aBG3.csv")
all.projs <- evoupdate(results, schedule, prev.projs)
write.csv(all.projs, "prog-2aBG3.csv", row.names = FALSE)
####### Primera Catalana, Grup I
# Scrape data
url <- 'https://www.resultados-futbol.com/primera_catalana2020/grupo1/calendario'
webpage <- read_html(url)
local_data <- html_nodes(webpage,'.equipo1') %>%  html_nodes("a") %>% html_attr("href")
vist_data <- html_nodes(webpage,'.equipo2') %>%  html_nodes("a") %>% html_attr("href")
result_data <- html_nodes(webpage,'.url') %>% html_text(result_data)
dates_data <- html_nodes(webpage,'.fecha') %>% html_text(dates_data)
# Create data frame
games <- data.frame(home1 = local_data, away1 = vist_data, score = result_data, date = dates_data)
home.names <- read.csv("clubnames.csv") %>% select(home1, home)
away.names <- read.csv("clubnames.csv") %>% select(away1, away)
games <- games %>% left_join(home.names, by = "home1") %>% left_join(away.names, by = "away1") %>% select(home, away, score, date)
games$week <- rep(1:34, each = 8)
schedule1 <- subset(games, grepl("x", games$score))
schedule2 <- subset(games, grepl(":", games$score))
schedule <- rbind(schedule2, schedule1)
schedule <- schedule %>% select(-score, -date)
schedule <- schedule[order(-schedule$week),]
results <- subset(games, grepl("-", games$score))
results <- subset(results, !grepl("x", results$score))
results <- results %>% separate(score, c("home.score", "away.score"))
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Create date variable
results <- daterecode(results)
# Dixon-Coles Ratings Model
weights <- weights_dc(results$date, xi=0.002)
gm_res <- goalmodel(goals1 = results$home.score, goals2 = results$away.score,
team1 = results$home, team2=results$away, weights = weights, dc=TRUE)
ratings <- as.data.frame(gm_res$parameters)
ratings <- rownames_to_column(ratings, "team")
ratings$off.rank <- rank(-ratings$attack, ties.method = "random")
ratings$def.rank <- rank(-ratings$defense, ties.method = "random")
# Dixon-Coles Game-by-Game Predictions
predictions <- predict_result(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# Add week back
games$key <- paste(games$home, games$away, sep="")
predictions$key <- paste(predictions$team1, predictions$team2, sep="")
predictions <- predictions %>% left_join(games, by = "key") %>% select(week, team1, p1, pd, p2, team2)
## Calculate Predicated GD
goal.preds <- predict_expg(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
gd <- gdcalc(goal.preds, results)
# Current Table
table.all <- currenttable(results)
table.all <- table.all %>% left_join(gd, by = "team")
# Simulation (3/7)
all.sims <- simseason(predictions, table.all, i.sim)
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank == 1) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter((rank == 2) | (rank == 14)) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 14 ) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final.primcat1 <- final[order(-final$proj.points),]
partits.primcat1 <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.primcat1, "final-primcat1.csv", row.names = FALSE)
write.csv(partits.primcat1, "games-primcat1.csv", row.names = FALSE)
# Evolucio Table (3/7)
#all.projs <- evorerun(results, schedule)
prev.projs <- read.csv("prog-primcat1.csv")
all.projs <- evoupdate(results, schedule, prev.projs)
write.csv(all.projs, "prog-primcat1.csv", row.names = FALSE)
####### Primera Catalana, Grup II
# Scrape data
url <- 'https://www.resultados-futbol.com/primera_catalana2020/grupo2/calendario'
webpage <- read_html(url)
local_data <- html_nodes(webpage,'.equipo1') %>%  html_nodes("a") %>% html_attr("href")
vist_data <- html_nodes(webpage,'.equipo2') %>%  html_nodes("a") %>% html_attr("href")
result_data <- html_nodes(webpage,'.url') %>% html_text(result_data)
dates_data <- html_nodes(webpage,'.fecha') %>% html_text(dates_data)
# Create data frame
games <- data.frame(home1 = local_data, away1 = vist_data, score = result_data, date = dates_data)
home.names <- read.csv("clubnames.csv") %>% select(home1, home)
away.names <- read.csv("clubnames.csv") %>% select(away1, away)
games <- games %>% left_join(home.names, by = "home1") %>% left_join(away.names, by = "away1") %>% select(home, away, score, date)
games$week <- rep(1:34, each = 9)
schedule1 <- subset(games, grepl("x", games$score))
schedule2 <- subset(games, grepl(":", games$score))
schedule <- rbind(schedule2, schedule1)
schedule <- schedule %>% select(-score, -date)
schedule <- scheduled[order(-schedule$week),]
results <- subset(games, grepl("-", games$score))
results <- subset(results, !grepl("x", results$score))
results <- results %>% separate(score, c("home.score", "away.score"))
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Create date variable
results <- daterecode(results)
# Dixon-Coles Ratings Model
weights <- weights_dc(results$date, xi=0.002)
gm_res <- goalmodel(goals1 = results$home.score, goals2 = results$away.score,
team1 = results$home, team2=results$away, weights = weights, dc=TRUE)
ratings <- as.data.frame(gm_res$parameters)
ratings <- rownames_to_column(ratings, "team")
ratings$off.rank <- rank(-ratings$attack, ties.method = "random")
ratings$def.rank <- rank(-ratings$defense, ties.method = "random")
# Dixon-Coles Game-by-Game Predictions
predictions <- predict_result(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# Add week back
games$key <- paste(games$home, games$away, sep="")
predictions$key <- paste(predictions$team1, predictions$team2, sep="")
predictions <- predictions %>% left_join(games, by = "key") %>% select(week, team1, p1, pd, p2, team2)
## Calculate Predicated GD
goal.preds <- predict_expg(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
gd <- gdcalc(goal.preds, results)
# Current Table
table.all <- currenttable(results)
table.all <- table.all %>% left_join(gd, by = "team")
# Simulation (4/7)
all.sims <- simseason(predictions, table.all, i.sim)
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank == 1) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter((rank == 2) | (rank == 14)) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 14 ) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final.primcat2 <- final[order(-final$proj.points),]
partits.primcat2 <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.primcat2, "final-primcat2.csv", row.names = FALSE)
write.csv(partits.primcat2, "games-primcat2.csv", row.names = FALSE)
# Evolucio Table (4/7)
#all.projs <- evorerun(results, schedule)
prev.projs <- read.csv("prog-primcat2.csv")
all.projs <- evoupdate(results, schedule, prev.projs)
write.csv(all.projs, "prog-primcat2.csv", row.names = FALSE)
####### Lliga Femenina
# Scrape data
url <- 'https://www.resultados-futbol.com/primera_division_femenina2020/grupo1/calendario'
webpage <- read_html(url)
local_data <- html_nodes(webpage,'.equipo1') %>%  html_nodes("a") %>% html_attr("href")
vist_data <- html_nodes(webpage,'.equipo2') %>%  html_nodes("a") %>% html_attr("href")
result_data <- html_nodes(webpage,'.url') %>% html_text(result_data)
dates_data <- html_nodes(webpage,'.fecha') %>% html_text(dates_data)
# Create data frame
games <- data.frame(home1 = local_data, away1 = vist_data, score = result_data, date = dates_data)
home.names <- read.csv("clubnames.csv") %>% select(home1, home)
away.names <- read.csv("clubnames.csv") %>% select(away1, away)
games <- games %>% left_join(home.names, by = "home1") %>% left_join(away.names, by = "away1") %>% select(home, away, score, date)
games$week <- rep(1:30, each = 8)
schedule1 <- subset(games, grepl("x", games$score))
schedule2 <- subset(games, grepl(":", games$score))
schedule <- rbind(schedule2, schedule1)
schedule <- schedule %>% select(-score, -date)
schedule <- schedule[order(schedule$week),]
results <- subset(games, grepl("-", games$score))
results <- subset(results, !grepl("x", results$score))
results <- results %>% separate(score, c("home.score", "away.score"))
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Create date variable
results <- daterecode(results)
# Dixon-Coles Ratings Model
weights <- weights_dc(results$date, xi=0.002)
gm_res <- goalmodel(goals1 = results$home.score, goals2 = results$away.score,
team1 = results$home, team2=results$away, weights = weights, dc=TRUE)
ratings <- as.data.frame(gm_res$parameters)
ratings <- rownames_to_column(ratings, "team")
ratings$off.rank <- rank(-ratings$attack, ties.method = "random")
ratings$def.rank <- rank(-ratings$defense, ties.method = "random")
# Dixon-Coles Game-by-Game Predictions
predictions <- predict_result(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# Add week back
games$key <- paste(games$home, games$away, sep="")
predictions$key <- paste(predictions$team1, predictions$team2, sep="")
predictions <- predictions %>% left_join(games, by = "key") %>% select(week, team1, p1, pd, p2, team2)
## Calculate Predicated GD
goal.preds <- predict_expg(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
gd <- gdcalc(goal.preds, results)
# Current Table
table.all <- currenttable(results)
table.all <- table.all %>% left_join(gd, by = "team")
# Simulation (5/7)
all.sims <- simseason(predictions, table.all, i.sim)
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank == 1) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter(rank < 3) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 14 ) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final.prifem <- final[order(-final$proj.points),]
partits.prifem <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.prifem, "final-prifem.csv", row.names = FALSE)
write.csv(partits.prifem, "games-prifem.csv", row.names = FALSE)
# Evolucio Table (5/7)
#all.projs <- evorerun(results, schedule)
prev.projs <- read.csv("prog-prifem.csv")
all.projs <- evoupdate(results, schedule, prev.projs)
write.csv(all.projs, "prog-prifem.csv", row.names = FALSE)
###### Primera
# Scrape data
url <- 'https://www.resultados-futbol.com/primera2020/grupo1/calendario'
webpage <- read_html(url)
local_data <- html_nodes(webpage,'.equipo1') %>%  html_nodes("a") %>% html_attr("href")
vist_data <- html_nodes(webpage,'.equipo2') %>%  html_nodes("a") %>% html_attr("href")
result_data <- html_nodes(webpage,'.url') %>% html_text()
dates_data <- html_nodes(webpage,'.fecha') %>% html_text()
# Create data frame
games <- data.frame(home1 = local_data, away1 = vist_data, score = result_data, date = dates_data)
home.names <- read.csv("clubnames.csv") %>% select(home1, home)
away.names <- read.csv("clubnames.csv") %>% select(away1, away)
games <- games %>% left_join(home.names, by = "home1") %>% left_join(away.names, by = "away1") %>% select(home, away, score, date)
games$week <- rep(1:38, each = 10)
schedule1 <- subset(games, grepl("x", games$score))
schedule2 <- subset(games, grepl(":", games$score))
schedule <- rbind(schedule2, schedule1)
schedule <- schedule %>% select(-score, -date)
schedule <- schedule[order(schedule$week),]
results <- subset(games, grepl("-", games$score))
results <- subset(results, !grepl("x", results$score))
results <- results %>% separate(score, c("home.score", "away.score"))
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Create date variable
results <- daterecode(results)
# Dixon-Coles Ratings Model
weights <- weights_dc(results$date, xi=0.002)
gm_res <- goalmodel(goals1 = results$home.score, goals2 = results$away.score,
team1 = results$home, team2=results$away, weights = weights, dc=TRUE)
ratings <- as.data.frame(gm_res$parameters)
ratings <- rownames_to_column(ratings, "team")
ratings$off.rank <- rank(-ratings$attack, ties.method = "random")
ratings$def.rank <- rank(-ratings$defense, ties.method = "random")
# Dixon-Coles Game-by-Game Predictions
predictions <- predict_result(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# Add week back
games$key <- paste(games$home, games$away, sep="")
predictions$key <- paste(predictions$team1, predictions$team2, sep="")
predictions <- predictions %>% left_join(games, by = "key") %>% select(week, team1, p1, pd, p2, team2)
## Calculate Predicated GD
goal.preds <- predict_expg(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
gd <- gdcalc(goal.preds, results)
# Current Table
table.all <- currenttable(results)
table.all <- table.all %>% left_join(gd, by = "team")
# Simulation (6/7)
all.sims <- simseason(predictions, table.all, i.sim)
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank == 1) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter(rank < 5) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 17 ) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final.primera <- final[order(-final$proj.points),]
partits.primera <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.primera, "final-primera.csv", row.names = FALSE)
write.csv(partits.primera, "games-primera.csv", row.names = FALSE)
# Evolucio Table (6/7)
#all.projs <- evorerun(results, schedule)
prev.projs <- read.csv("prog-primera.csv")
all.projs <- evoupdate(results, schedule, prev.projs)
write.csv(all.projs, "prog-primera.csv", row.names = FALSE)
####### Segona A
# Scrape data
url <- 'https://www.resultados-futbol.com/segunda2020/grupo1/calendario'
webpage <- read_html(url)
local_data <- html_nodes(webpage,'.equipo1') %>%  html_nodes("a") %>% html_attr("href")
vist_data <- html_nodes(webpage,'.equipo2') %>%  html_nodes("a") %>% html_attr("href")
result_data <- html_nodes(webpage,'.rstd') %>% html_text()
dates_data <- html_nodes(webpage,'.fecha') %>% html_text()
# Create data frame
games <- data.frame(home1 = local_data, away1 = vist_data, score = result_data, date = dates_data)
games$score <- as.character.factor(games$score)
games$score <- str_sub(games$score, -11, -7)
home.names <- read.csv("clubnames.csv") %>% select(home1, home)
away.names <- read.csv("clubnames.csv") %>% select(away1, away)
games <- games %>% left_join(home.names, by = "home1") %>% left_join(away.names, by = "away1") %>% select(home, away, score, date)
games$week <- rep(1:42, each = 11)
schedule1 <- subset(games, grepl("x", games$score))
schedule2 <- subset(games, grepl(":", games$score))
schedule3 <- subset(games, grepl("Apl", games$score))
schedule <- rbind(schedule2, schedule1)
schedule <- schedule %>% select(-score, -date)
schedule <- schedule[order(schedule$week),]
results <- subset(games, grepl("-", games$score))
results <- subset(results, !grepl("x", results$score))
results <- results %>% separate(score, c("home.score", "away.score"))
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Create date variable
results <- daterecode(results)
# Dixon-Coles Ratings Model
weights <- weights_dc(results$date, xi=0.002)
gm_res <- goalmodel(goals1 = results$home.score, goals2 = results$away.score,
team1 = results$home, team2=results$away, weights = weights, dc=TRUE)
ratings <- as.data.frame(gm_res$parameters)
ratings <- rownames_to_column(ratings, "team")
ratings$off.rank <- rank(-ratings$attack, ties.method = "random")
ratings$def.rank <- rank(-ratings$defense, ties.method = "random")
# Dixon-Coles Game-by-Game Predictions
predictions <- predict_result(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# Add week back
games$key <- paste(games$home, games$away, sep="")
predictions$key <- paste(predictions$team1, predictions$team2, sep="")
predictions <- predictions %>% left_join(games, by = "key") %>% select(week, team1, p1, pd, p2, team2)
## Calculate Predicated GD
goal.preds <- predict_expg(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
gd <- gdcalc(goal.preds, results)
# Current Table
table.all <- currenttable(results)
table.all <- table.all %>% left_join(gd, by = "team")
# Simulation (7/7)
all.sims <- simseason(predictions, table.all, i.sim)
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank < 3) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter((rank > 2) & (rank < 7)) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 18 ) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final.sega <- final[order(-final$proj.points),]
partits.sega <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.sega, "final-sega.csv", row.names = FALSE)
write.csv(partits.sega, "games-sega.csv", row.names = FALSE)
# Evolucio Table (7/7)
#all.projs <- evorerun(results, schedule)
prev.projs <- read.csv("prog-sega.csv")
all.projs <- evoupdate(results, schedule, prev.projs)
write.csv(all.projs, "prog-sega.csv", row.names = FALSE)
############################
########## Website #########
############################
####### Render Site
library(blogdown)
library(rmarkdown)
setwd("~/Google Drive/Futbol/futstatcat")
render_site()
serve_site()
