shots$seconds.from.last[is.na(shots$seconds.from.last)] <- shots$game.second[is.na(shots$seconds.from.last)]
shots$score.diff.abs <- abs(shots$score.diff)
model <- gbm(goal ~ shot.distance + shot.angle + seconds.from.last + man.advantage + score.diff.abs, data = shots, distribution = "bernoulli", verbose = T)
shots$xgoals <- predict(model,newdata = shots,type="response")
xg.home <- shots %>% filter(home.event == 1) %>% group_by(game.id,home.team) %>% summarise(xGF = sum(xgoals)) %>% rename(team = home.team)
xg.away <- shots %>% filter(home.event == 0) %>% group_by(game.id,away.team) %>% summarise(xGF = sum(xgoals)) %>% rename(team = away.team)
xg.by.game <- bind_rows(xg.home,xg.away) %>% arrange(as.numeric(game.id))
goals.home <- shots %>% group_by(game.id,home.team) %>% summarise(GF = max(about.goals.home)) %>% rename(team = home.team)
goals.away <- shots %>% group_by(game.id,away.team) %>% summarise(GF = max(about.goals.away)) %>% rename(team = away.team)
goals.by.game <- bind_rows(goals.home,goals.away) %>% arrange(as.numeric(game.id))
xga.home <- shots %>% filter(home.event == 0) %>% group_by(game.id,home.team) %>% summarise(xGA = sum(xgoals)) %>% rename(team = home.team)
xga.away <- shots %>% filter(home.event == 1) %>% group_by(game.id,away.team) %>% summarise(xGA = sum(xgoals)) %>% rename(team = away.team)
xga.by.game <- bind_rows(xga.home,xga.away) %>% arrange(as.numeric(game.id))
ga.home <- shots %>% group_by(game.id,home.team) %>% summarise(GA = max(about.goals.away)) %>% rename(team = home.team)
ga.away <- shots %>% group_by(game.id,away.team) %>% summarise(GA = max(about.goals.home)) %>% rename(team = away.team)
ga.by.game <- bind_rows(ga.home,ga.away) %>% arrange(as.numeric(game.id))
xg.by.game <- xg.by.game %>% left_join(goals.by.game, by = c("game.id","team")) %>% left_join(xga.by.game, by = c("game.id","team")) %>% left_join(ga.by.game, by = c("game.id","team"))
xg <- xg.by.game %>% left_join(goals.by.game, by = c("game.id","team")) %>% left_join(xga.by.game, by = c("game.id","team")) %>% left_join(ga.by.game, by = c("game.id","team"))
View(xg)
shots <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & about.period < 4)
shots$result.emptyNet[is.na(shots$result.emptyNet)] <- FALSE
shots <- shots %>% filter(result.emptyNet == FALSE)
shots$goal <- ifelse(shots$result.eventTypeId == "GOAL",1,0)
shots$shot.angle <- (asin(abs(shots$coordinates.y)/sqrt((87.95 - abs(shots$coordinates.x))^2 + shots$coordinates.y^2))*180) / 3.14
shots$shot.distance <- sqrt((87.95 - abs(shots$coordinates.x))^2 + shots$coordinates.y^2)
shots$man.advantage <- ifelse(shots$home.event == 1, shots$home.skaters - shots$away.skaters, shots$away.skaters - shots$home.skaters)
shots <- shots %>% group_by(game.id,team.name) %>% mutate(last.x = lag(coordinates.x,1)) %>% mutate(last.y = lag(coordinates.y,1)) %>% mutate(last.gamesec = lag(game.second,1))
shots$last.y[is.na(shots$last.y)] <- 0
shots$last.x[is.na(shots$last.x)] <- 0
shots = shots %>% mutate(distance.from.last = sqrt((coordinates.x - last.x)^2 + (coordinates.y - last.y)^2)) %>% mutate(seconds.from.last = game.second - last.gamesec)
shots$distance.from.last[is.na(shots$distance.from.last)] <- mean(shots$distance.from.last, na.rm = T)
shots$seconds.from.last[is.na(shots$seconds.from.last)] <- shots$game.second[is.na(shots$seconds.from.last)]
shots$score.diff.abs <- abs(shots$score.diff)
model <- gbm(goal ~ shot.distance + shot.angle + seconds.from.last + man.advantage + score.diff.abs, data = shots, distribution = "bernoulli", verbose = T)
shots$xgoals <- predict(model,newdata = shots,type="response")
xg.home <- shots %>% filter(home.event == 1) %>% group_by(game.id,home.team) %>% summarise(xGF = sum(xgoals),.groups = 'drop') %>% rename(team = home.team)
xg.away <- shots %>% filter(home.event == 0) %>% group_by(game.id,away.team) %>% summarise(xGF = sum(xgoals),.groups = 'drop') %>% rename(team = away.team)
xg.by.game <- bind_rows(xg.home,xg.away) %>% arrange(as.numeric(game.id))
goals.home <- shots %>% group_by(game.id,home.team) %>% summarise(GF = max(about.goals.home),.groups = 'drop') %>% rename(team = home.team)
goals.away <- shots %>% group_by(game.id,away.team) %>% summarise(GF = max(about.goals.away),.groups = 'drop') %>% rename(team = away.team)
goals.by.game <- bind_rows(goals.home,goals.away) %>% arrange(as.numeric(game.id))
xga.home <- shots %>% filter(home.event == 0) %>% group_by(game.id,home.team) %>% summarise(xGA = sum(xgoals), .groups = 'drop') %>% rename(team = home.team)
xga.away <- shots %>% filter(home.event == 1) %>% group_by(game.id,away.team) %>% summarise(xGA = sum(xgoals), .groups = 'drop') %>% rename(team = away.team)
xga.by.game <- bind_rows(xga.home,xga.away) %>% arrange(as.numeric(game.id))
ga.home <- shots %>% group_by(game.id,home.team) %>% summarise(GA = max(about.goals.away), .groups = 'drop') %>% rename(team = home.team)
ga.away <- shots %>% group_by(game.id,away.team) %>% summarise(GA = max(about.goals.home), .groups = 'drop') %>% rename(team = away.team)
ga.by.game <- bind_rows(ga.home,ga.away) %>% arrange(as.numeric(game.id))
xg <- xg.by.game %>% left_join(goals.by.game, by = c("game.id","team")) %>% left_join(xga.by.game, by = c("game.id","team")) %>% left_join(ga.by.game, by = c("game.id","team"))
View(xg)
xg$GFabove <- xg$GF-xg$xGF
xg$GFabove <- xg$GF-xg$xGF
xg$GAbelow <- xg$xGA-xg$GA
View(plays)
api.link <- paste0("https://statsapi.web.nhl.com/api/v1/schedule?season=20192020")
sked <- fromJSON(api.link)
sked <- flatten(unnest(tibble(sked$dates$games),cols = c(`sked$dates$games`)))
results <- sked %>% filter(status.abstractGameState != "Preview")
scheduled <- sked %>% filter(status.abstractGameState == "Preview")
new.ids <- as.character(results$gamePk)
new.ids <- new.ids[!(new.ids %in% plays$game.id)]
new.ids <- new.ids[str_sub(new.ids,5,6)=="03"]
# Scrape plays for new games
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(new.ids))
for (i in new.ids){
pb$tick()
api.link <- paste0("https://statsapi.web.nhl.com/api/v1/game/",i,"/feed/live")
game <- fromJSON(api.link)
new.plays <- flatten(tibble(game$liveData$plays$allPlays)) %>% select(-players)
new.plays$home.team <- game$gameData$teams$home$name
new.plays$away.team <- game$gameData$teams$away$name
new.plays$game.id <- i
if (i==1){all.new.plays <- new.plays} else {bind_rows(all.new.plays,new.plays)}
}
# Scrape plays for new games
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(new.ids))
for (i in new.ids){
pb$tick()
api.link <- paste0("https://statsapi.web.nhl.com/api/v1/game/",i,"/feed/live")
game <- fromJSON(api.link)
new.plays <- flatten(tibble(game$liveData$plays$allPlays)) %>% select(-players)
new.plays$home.team <- game$gameData$teams$home$name
new.plays$away.team <- game$gameData$teams$away$name
new.plays$game.id <- i
if (i==new.ids[1]){all.new.plays <- new.plays} else {bind_rows(all.new.plays,new.plays)}
}
i==new.ids[1]
api.link <- paste0("https://statsapi.web.nhl.com/api/v1/game/",i,"/feed/live")
game <- fromJSON(api.link)
new.plays <- flatten(tibble(game$liveData$plays$allPlays)) %>% select(-players)
new.plays$home.team <- game$gameData$teams$home$name
new.plays$away.team <- game$gameData$teams$away$name
new.plays$game.id <- i
if (i==new.ids[1]){all.new.plays <- new.plays} else {bind_rows(all.new.plays,new.plays)}
# Scrape plays for new games and add strength variables
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(new.ids))
for (i in new.ids){
pb$tick()
api.link <- paste0("https://statsapi.web.nhl.com/api/v1/game/",i,"/feed/live")
game <- fromJSON(api.link)
new.plays <- flatten(tibble(game$liveData$plays$allPlays)) %>% select(-players)
new.plays$home.team <- game$gameData$teams$home$name
new.plays$away.team <- game$gameData$teams$away$name
new.plays$game.id <- i
if (i==new.ids[1]){all.new.plays <- new.plays} else {all.new.plays <- bind_rows(all.new.plays,new.plays)}
}
all.new.plays$game.second <- as.numeric(str_sub(all.new.plays$about.periodTime, start = 1, end = 2))*60 + as.numeric(str_sub(all.new.plays$about.periodTime, start = 4, end = 5))
all.new.plays$game.second <- ifelse(all.new.plays$about.period == 2, all.new.plays$game.second + (20*60),all.new.plays$game.second)
all.new.plays$game.second <- ifelse(all.new.plays$about.period == 3, all.new.plays$game.second + (40*60),all.new.plays$game.second)
all.new.plays$game.second <- ifelse(all.new.plays$about.period > 3, NA, all.new.plays$game.second)
all.new.plays$home.skaters <- 5
all.new.plays$away.skaters <- 5
all.new.plays$home.event <- ifelse(all.new.plays$home.team == all.new.plays$team.name,1,0)
View(all.new.plays)
View(plays)
table(plays$strength)
plays$strength <- paste0(plays$home.skaters,"x",plays$away.skaters)
table(plays$strength)
mins <- tibble(game.id = rep(unique(all.new.plays$game.id), each = 120), plus = rep(1:120,times = length(unique(all.new.plays$game.id))))
mins <- tibble(game.id = rep(unique(all.new.plays$game.id), each = 120), plus = rep(1:120,times = length(unique(all.new.plays$game.id))))
home.pens <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 1 & result.penaltySeverity %in% c("Minor","Bench Minor")) %>% select(game.id,game.second) %>% left_join(mins, by = "game.id") %>% mutate(game.second = game.second + plus)
away.pens <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 0 & result.penaltySeverity %in% c("Minor","Bench Minor")) %>% select(game.id,game.second) %>% left_join(mins, by = "game.id") %>% mutate(game.second = game.second + plus)
major.mins <- tibble(game.id = rep(unique(all.new.plays$game.id), each = 300), plus = rep(1:300,times = length(unique(all.new.plays$game.id))))
home.majors <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 1 & result.penaltySeverity == "Major" & result.secondaryType != "Fighting") %>% select(game.id,game.second) %>% left_join(major.mins, by = "game.id") %>% mutate(game.second = game.second + plus)
away.majors <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 0 & result.penaltySeverity == "Major" & result.secondaryType != "Fighting") %>% select(game.id,game.second) %>% left_join(mins, by = "game.id") %>% mutate(game.second = game.second + plus)
home.pens <- bind_rows(home.pens,home.majors)
away.pens <- bind_rows(away.pens,away.majors)
View(home.pens)
View(all.new.plays)
home.pens <- home.pens %>% group_by(game.id,game.second) %>% count() %>% rename(home.men.down = n) %>% na.omit()
away.pens <- away.pens %>% group_by(game.id,game.second) %>% count() %>% rename(away.men.down = n) %>% na.omit()
home.pens$home.men.down <- ifelse(home.pens$home.men.down > 2,2,home.pens$home.men.down)
away.pens$away.men.down <- ifelse(away.pens$away.men.down > 2,2,away.pens$away.men.down)
all.new.plays <- all.new.plays %>% left_join(home.pens, by = c("game.id","game.second")) %>% left_join(away.pens, by = c("game.id","game.second"))
all.new.plays$home.men.down[is.na(all.new.plays$home.men.down)] <- 0
all.new.plays$away.men.down[is.na(all.new.plays$away.men.down)] <- 0
all.new.plays$home.skaters <- all.new.plays$home.skaters - all.new.plays$home.men.down
all.new.plays$away.skaters <- all.new.plays$away.skaters - all.new.plays$away.men.down
all.new.plays$strength <- paste0(all.new.plays$home.skaters,"x",all.new.plays$away.skaters)
names(all.new.plays)
all.new.plays <- all.new.plays %>% select(-home.men.down,-away.men.down)
View(plays)
summary(plays$score.diff)
all.new.plays$score.diff <- all.new.plays$about.goals.home - all.new.plays$about.goals.away
View(all.new.plays)
View(all.new.plays %>% select(result.eventTypeId,result.description,home.team,away.team,home.skaters,away.skaters,strength))
View(all.new.plays %>% select(result.eventTypeId,result.description,about.periodTime, home.team,away.team,home.skaters,away.skaters,strength))
!(names(all.new.plays) %in% names(plays))
fen.weights <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & plays$strength == "5x5")
fen.weights$score.diff.adj <- ifelse(fen.weights$score.diff < -3, -3, fen.weights$score.diff)
fen.weights$score.diff.adj <- ifelse(fen.weights$score.diff > 3, 3, fen.weights$score.diff.adj)
fen.weights <- fen.weights %>% group_by(home.event, score.diff.adj) %>% count()
fen.weights <- bind_cols(fen.weights[1:7,],fen.weights[8:14,]) %>% select(score.diff.adj...2,n...3,n...6)
names(fen.weights) <- c("score.diff.adj","away","home")
fen.weights$away.weight <- ((fen.weights$away+fen.weights$home)/2)/fen.weights$away
fen.weights$home.weight <- ((fen.weights$away+fen.weights$home)/2)/fen.weights$home
fen.weights <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & plays$strength == "5x5")
fen.weights$score.diff.adj <- ifelse(fen.weights$score.diff < -3, -3, fen.weights$score.diff)
fen.weights$score.diff.adj <- ifelse(fen.weights$score.diff > 3, 3, fen.weights$score.diff.adj)
fen.weights <- fen.weights %>% group_by(home.event, score.diff.adj) %>% count()
fen.weights <- suppressMessages(bind_cols(fen.weights[1:7,],fen.weights[8:14,]) %>% select(score.diff.adj...2,n...3,n...6))
names(fen.weights) <- c("score.diff.adj","away","home")
fen.weights$away.weight <- ((fen.weights$away+fen.weights$home)/2)/fen.weights$away
fen.weights$home.weight <- ((fen.weights$away+fen.weights$home)/2)/fen.weights$home
fenwick <- bind_rows(tibble(home.event = rep(0,times=7),score.diff.adj = fen.weights$score.diff.adj,fenwick = fen.weights$away.weight),tibble(home.event = rep(1,times=7),score.diff.adj = fen.weights$score.diff.adj,fenwick = fen.weights$home.weight))
plays$score.diff.adj <- ifelse(plays$score.diff < -3, -3, plays$score.diff)
plays$score.diff.adj <- ifelse(plays$score.diff > 3, 3, plays$score.diff.adj)
plays <- plays %>% left_join(fenwick, by = c("score.diff.adj","home.event"))
fen.by.game <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & plays$strength == "5x5")
fen.home <- fen.by.game %>% filter(home.event == 1) %>% group_by(game.id,home.team) %>% summarise(fenwick = sum(fenwick)) %>% rename(team = home.team)
fen.away <- fen.by.game %>% filter(home.event == 0) %>% group_by(game.id,away.team) %>% summarise(fenwick = sum(fenwick)) %>% rename(team = away.team)
fen.for <- bind_rows(fen.home,fen.away) %>% arrange(as.numeric(game.id))
fen.opp.home <- fen.by.game %>% filter(home.event == 0) %>% group_by(game.id,home.team) %>% summarise(fenwick.opp = sum(fenwick)) %>% rename(team = home.team)
fen.opp.away <- fen.by.game %>% filter(home.event == 1) %>% group_by(game.id,away.team) %>% summarise(fenwick.opp = sum(fenwick)) %>% rename(team = away.team)
fen.opp <- bind_rows(fen.opp.home,fen.opp.away) %>% arrange(as.numeric(game.id))
fen.by.game <- fen.for %>% left_join(fen.opp, by = c("game.id","team"))
fen.by.game$fenwick.pct <- fen.by.game$fenwick/(fen.by.game$fenwick+fen.by.game$fenwick.opp)
game.stats <- fen.by.game %>% left_join(xg, by = c("game.id","team"))
game.stats$win <- ifelse(game.stats$GF > game.stats$GA,1,0)
fen.by.game <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & plays$strength == "5x5")
fen.home <- fen.by.game %>% filter(home.event == 1) %>% group_by(game.id,home.team) %>% summarise(fenwick = sum(fenwick), .groups = 'drop') %>% rename(team = home.team)
fen.away <- fen.by.game %>% filter(home.event == 0) %>% group_by(game.id,away.team) %>% summarise(fenwick = sum(fenwick), .groups = 'drop') %>% rename(team = away.team)
fen.for <- bind_rows(fen.home,fen.away) %>% arrange(as.numeric(game.id))
fen.opp.home <- fen.by.game %>% filter(home.event == 0) %>% group_by(game.id,home.team) %>% summarise(fenwick.opp = sum(fenwick), .groups = 'drop') %>% rename(team = home.team)
fen.opp.away <- fen.by.game %>% filter(home.event == 1) %>% group_by(game.id,away.team) %>% summarise(fenwick.opp = sum(fenwick), .groups = 'drop') %>% rename(team = away.team)
fen.opp <- bind_rows(fen.opp.home,fen.opp.away) %>% arrange(as.numeric(game.id))
fen.by.game <- fen.for %>% left_join(fen.opp, by = c("game.id","team"))
fen.by.game$fenwick.pct <- fen.by.game$fenwick/(fen.by.game$fenwick+fen.by.game$fenwick.opp)
game.stats <- fen.by.game %>% left_join(xg, by = c("game.id","team"))
game.stats$win <- ifelse(game.stats$GF > game.stats$GA,1,0)
View(game.stats)
View(xg.home)
shots <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & about.period < 4)
shots$result.emptyNet[is.na(shots$result.emptyNet)] <- FALSE
shots <- shots %>% filter(result.emptyNet == FALSE)
shots$goal <- ifelse(shots$result.eventTypeId == "GOAL",1,0)
shots$shot.angle <- (asin(abs(shots$coordinates.y)/sqrt((87.95 - abs(shots$coordinates.x))^2 + shots$coordinates.y^2))*180) / 3.14
shots$shot.distance <- sqrt((87.95 - abs(shots$coordinates.x))^2 + shots$coordinates.y^2)
shots$man.advantage <- ifelse(shots$home.event == 1, shots$home.skaters - shots$away.skaters, shots$away.skaters - shots$home.skaters)
shots <- shots %>% group_by(game.id,team.name) %>% mutate(last.x = lag(coordinates.x,1)) %>% mutate(last.y = lag(coordinates.y,1)) %>% mutate(last.gamesec = lag(game.second,1))
shots$last.y[is.na(shots$last.y)] <- 0
shots$last.x[is.na(shots$last.x)] <- 0
shots = shots %>% mutate(distance.from.last = sqrt((coordinates.x - last.x)^2 + (coordinates.y - last.y)^2)) %>% mutate(seconds.from.last = game.second - last.gamesec)
shots$distance.from.last[is.na(shots$distance.from.last)] <- mean(shots$distance.from.last, na.rm = T)
shots$seconds.from.last[is.na(shots$seconds.from.last)] <- shots$game.second[is.na(shots$seconds.from.last)]
shots$score.diff.abs <- abs(shots$score.diff)
model <- gbm(goal ~ shot.distance + shot.angle + seconds.from.last + man.advantage + score.diff.abs, data = shots, distribution = "bernoulli", verbose = T)
shots$xgoals <- predict(model,newdata = shots,type="response")
xg.home <- shots %>% filter(home.event == 1) %>% group_by(game.id,home.team) %>% summarise(xGF = sum(xgoals),.groups = 'drop') %>% rename(team = home.team)
xg.away <- shots %>% filter(home.event == 0) %>% group_by(game.id,away.team) %>% summarise(xGF = sum(xgoals),.groups = 'drop') %>% rename(team = away.team)
xg.by.game <- bind_rows(xg.home,xg.away) %>% arrange(as.numeric(game.id))
goals.home <- shots %>% group_by(game.id,home.team) %>% summarise(GF = max(about.goals.home),.groups = 'drop') %>% rename(team = home.team)
goals.away <- shots %>% group_by(game.id,away.team) %>% summarise(GF = max(about.goals.away),.groups = 'drop') %>% rename(team = away.team)
goals.by.game <- bind_rows(goals.home,goals.away) %>% arrange(as.numeric(game.id))
xga.home <- shots %>% filter(home.event == 0) %>% group_by(game.id,home.team) %>% summarise(xGA = sum(xgoals), .groups = 'drop') %>% rename(team = home.team)
xga.away <- shots %>% filter(home.event == 1) %>% group_by(game.id,away.team) %>% summarise(xGA = sum(xgoals), .groups = 'drop') %>% rename(team = away.team)
xga.by.game <- bind_rows(xga.home,xga.away) %>% arrange(as.numeric(game.id))
ga.home <- shots %>% group_by(game.id,home.team) %>% summarise(GA = max(about.goals.away), .groups = 'drop') %>% rename(team = home.team) %>% mutate(home = 1)
ga.away <- shots %>% group_by(game.id,away.team) %>% summarise(GA = max(about.goals.home), .groups = 'drop') %>% rename(team = away.team) %>% mutate(home = 0)
ga.by.game <- bind_rows(ga.home,ga.away) %>% arrange(as.numeric(game.id))
xg <- xg.by.game %>% left_join(goals.by.game, by = c("game.id","team")) %>% left_join(xga.by.game, by = c("game.id","team")) %>% left_join(ga.by.game, by = c("game.id","team"))
xg$GFabove <- xg$GF-xg$xGF
xg$GAbelow <- xg$xGA-xg$GA
# Calculate team/game fenwick
fen.weights <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & plays$strength == "5x5")
fen.weights$score.diff.adj <- ifelse(fen.weights$score.diff < -3, -3, fen.weights$score.diff)
fen.weights$score.diff.adj <- ifelse(fen.weights$score.diff > 3, 3, fen.weights$score.diff.adj)
fen.weights <- fen.weights %>% group_by(home.event, score.diff.adj) %>% count()
fen.weights <- suppressMessages(bind_cols(fen.weights[1:7,],fen.weights[8:14,]) %>% select(score.diff.adj...2,n...3,n...6))
names(fen.weights) <- c("score.diff.adj","away","home")
fen.weights$away.weight <- ((fen.weights$away+fen.weights$home)/2)/fen.weights$away
fen.weights$home.weight <- ((fen.weights$away+fen.weights$home)/2)/fen.weights$home
fenwick <- bind_rows(tibble(home.event = rep(0,times=7),score.diff.adj = fen.weights$score.diff.adj,fenwick = fen.weights$away.weight),tibble(home.event = rep(1,times=7),score.diff.adj = fen.weights$score.diff.adj,fenwick = fen.weights$home.weight))
plays$score.diff.adj <- ifelse(plays$score.diff < -3, -3, plays$score.diff)
plays$score.diff.adj <- ifelse(plays$score.diff > 3, 3, plays$score.diff.adj)
plays <- plays %>% left_join(fenwick, by = c("score.diff.adj","home.event"))
fen.by.game <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & plays$strength == "5x5")
fen.home <- fen.by.game %>% filter(home.event == 1) %>% group_by(game.id,home.team) %>% summarise(fenwick = sum(fenwick), .groups = 'drop') %>% rename(team = home.team)
fen.away <- fen.by.game %>% filter(home.event == 0) %>% group_by(game.id,away.team) %>% summarise(fenwick = sum(fenwick), .groups = 'drop') %>% rename(team = away.team)
fen.for <- bind_rows(fen.home,fen.away) %>% arrange(as.numeric(game.id))
fen.opp.home <- fen.by.game %>% filter(home.event == 0) %>% group_by(game.id,home.team) %>% summarise(fenwick.opp = sum(fenwick), .groups = 'drop') %>% rename(team = home.team)
fen.opp.away <- fen.by.game %>% filter(home.event == 1) %>% group_by(game.id,away.team) %>% summarise(fenwick.opp = sum(fenwick), .groups = 'drop') %>% rename(team = away.team)
fen.opp <- bind_rows(fen.opp.home,fen.opp.away) %>% arrange(as.numeric(game.id))
fen.by.game <- fen.for %>% left_join(fen.opp, by = c("game.id","team"))
fen.by.game$fenwick.pct <- fen.by.game$fenwick/(fen.by.game$fenwick+fen.by.game$fenwick.opp)
game.stats <- fen.by.game %>% left_join(xg, by = c("game.id","team"))
game.stats$win <- ifelse(game.stats$GF > game.stats$GA,1,0)
suppressMessages(library(tidyverse))
suppressMessages(library(zoo))
suppressMessages(library(gbm))
suppressMessages(library(jsonlite))
suppressMessages(library(progress))
# Load play database
plays <- read_csv("~/Google Drive/Hockey/plays_since_2015.csv", cols = cols())
# Scrape current season, find completed game ids and uncompleted schedule
api.link <- paste0("https://statsapi.web.nhl.com/api/v1/schedule?season=20202021")
sked <- fromJSON(api.link)
sked <- flatten(unnest(tibble(sked$dates$games),cols = c(`sked$dates$games`)))
results <- sked %>% filter(status.abstractGameState != "Preview")
scheduled <- sked %>% filter(status.abstractGameState == "Preview")
new.ids <- as.character(results$gamePk)
new.ids <- new.ids[!(new.ids %in% plays$game.id)]
new.ids <- new.ids[str_sub(new.ids,5,6)=="02"]
# Scrape plays for new games and add strength variables
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(new.ids))
for (i in new.ids){
pb$tick()
api.link <- paste0("https://statsapi.web.nhl.com/api/v1/game/",i,"/feed/live")
game <- fromJSON(api.link)
new.plays <- flatten(tibble(game$liveData$plays$allPlays)) %>% select(-players)
new.plays$home.team <- game$gameData$teams$home$name
new.plays$away.team <- game$gameData$teams$away$name
new.plays$game.id <- i
if (i==new.ids[1]){all.new.plays <- new.plays} else {all.new.plays <- bind_rows(all.new.plays,new.plays)}
}
all.new.plays$game.second <- as.numeric(str_sub(all.new.plays$about.periodTime, start = 1, end = 2))*60 + as.numeric(str_sub(all.new.plays$about.periodTime, start = 4, end = 5))
all.new.plays$game.second <- ifelse(all.new.plays$about.period == 2, all.new.plays$game.second + (20*60),all.new.plays$game.second)
all.new.plays$game.second <- ifelse(all.new.plays$about.period == 3, all.new.plays$game.second + (40*60),all.new.plays$game.second)
all.new.plays$game.second <- ifelse(all.new.plays$about.period > 3, NA, all.new.plays$game.second)
all.new.plays$home.skaters <- 5
all.new.plays$away.skaters <- 5
all.new.plays$home.event <- ifelse(all.new.plays$home.team == all.new.plays$team.name,1,0)
mins <- tibble(game.id = rep(unique(all.new.plays$game.id), each = 120), plus = rep(1:120,times = length(unique(all.new.plays$game.id))))
home.pens <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 1 & result.penaltySeverity %in% c("Minor","Bench Minor")) %>% select(game.id,game.second) %>% left_join(mins, by = "game.id") %>% mutate(game.second = game.second + plus)
away.pens <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 0 & result.penaltySeverity %in% c("Minor","Bench Minor")) %>% select(game.id,game.second) %>% left_join(mins, by = "game.id") %>% mutate(game.second = game.second + plus)
major.mins <- tibble(game.id = rep(unique(all.new.plays$game.id), each = 300), plus = rep(1:300,times = length(unique(all.new.plays$game.id))))
home.majors <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 1 & result.penaltySeverity == "Major" & result.secondaryType != "Fighting") %>% select(game.id,game.second) %>% left_join(major.mins, by = "game.id") %>% mutate(game.second = game.second + plus)
away.majors <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 0 & result.penaltySeverity == "Major" & result.secondaryType != "Fighting") %>% select(game.id,game.second) %>% left_join(mins, by = "game.id") %>% mutate(game.second = game.second + plus)
home.pens <- bind_rows(home.pens,home.majors)
away.pens <- bind_rows(away.pens,away.majors)
home.pens <- home.pens %>% group_by(game.id,game.second) %>% count() %>% rename(home.men.down = n) %>% na.omit()
away.pens <- away.pens %>% group_by(game.id,game.second) %>% count() %>% rename(away.men.down = n) %>% na.omit()
home.pens$home.men.down <- ifelse(home.pens$home.men.down > 2,2,home.pens$home.men.down)
away.pens$away.men.down <- ifelse(away.pens$away.men.down > 2,2,away.pens$away.men.down)
all.new.plays <- all.new.plays %>% left_join(home.pens, by = c("game.id","game.second")) %>% left_join(away.pens, by = c("game.id","game.second"))
all.new.plays$home.men.down[is.na(all.new.plays$home.men.down)] <- 0
all.new.plays$away.men.down[is.na(all.new.plays$away.men.down)] <- 0
all.new.plays$home.skaters <- all.new.plays$home.skaters - all.new.plays$home.men.down
all.new.plays$away.skaters <- all.new.plays$away.skaters - all.new.plays$away.men.down
all.new.plays$strength <- paste0(all.new.plays$home.skaters,"x",all.new.plays$away.skaters)
all.new.plays <- all.new.plays %>% select(-home.men.down,-away.men.down)
all.new.plays$score.diff <- all.new.plays$about.goals.home - all.new.plays$about.goals.away
plays <- bind_rows(plays, all.new.plays)
# Run xG model and calculate team/game xG-derived stats
shots <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & about.period < 4)
shots$result.emptyNet[is.na(shots$result.emptyNet)] <- FALSE
shots <- shots %>% filter(result.emptyNet == FALSE)
shots$goal <- ifelse(shots$result.eventTypeId == "GOAL",1,0)
shots$shot.angle <- (asin(abs(shots$coordinates.y)/sqrt((87.95 - abs(shots$coordinates.x))^2 + shots$coordinates.y^2))*180) / 3.14
shots$shot.distance <- sqrt((87.95 - abs(shots$coordinates.x))^2 + shots$coordinates.y^2)
shots$man.advantage <- ifelse(shots$home.event == 1, shots$home.skaters - shots$away.skaters, shots$away.skaters - shots$home.skaters)
shots <- shots %>% group_by(game.id,team.name) %>% mutate(last.x = lag(coordinates.x,1)) %>% mutate(last.y = lag(coordinates.y,1)) %>% mutate(last.gamesec = lag(game.second,1))
shots$last.y[is.na(shots$last.y)] <- 0
shots$last.x[is.na(shots$last.x)] <- 0
shots = shots %>% mutate(distance.from.last = sqrt((coordinates.x - last.x)^2 + (coordinates.y - last.y)^2)) %>% mutate(seconds.from.last = game.second - last.gamesec)
shots$distance.from.last[is.na(shots$distance.from.last)] <- mean(shots$distance.from.last, na.rm = T)
shots$seconds.from.last[is.na(shots$seconds.from.last)] <- shots$game.second[is.na(shots$seconds.from.last)]
shots$score.diff.abs <- abs(shots$score.diff)
model <- gbm(goal ~ shot.distance + shot.angle + seconds.from.last + man.advantage + score.diff.abs, data = shots, distribution = "bernoulli", verbose = T)
shots$xgoals <- predict(model,newdata = shots,type="response")
xg.home <- shots %>% filter(home.event == 1) %>% group_by(game.id,home.team) %>% summarise(xGF = sum(xgoals),.groups = 'drop') %>% rename(team = home.team)
xg.away <- shots %>% filter(home.event == 0) %>% group_by(game.id,away.team) %>% summarise(xGF = sum(xgoals),.groups = 'drop') %>% rename(team = away.team)
xg.by.game <- bind_rows(xg.home,xg.away) %>% arrange(as.numeric(game.id))
goals.home <- shots %>% group_by(game.id,home.team) %>% summarise(GF = max(about.goals.home),.groups = 'drop') %>% rename(team = home.team)
goals.away <- shots %>% group_by(game.id,away.team) %>% summarise(GF = max(about.goals.away),.groups = 'drop') %>% rename(team = away.team)
goals.by.game <- bind_rows(goals.home,goals.away) %>% arrange(as.numeric(game.id))
xga.home <- shots %>% filter(home.event == 0) %>% group_by(game.id,home.team) %>% summarise(xGA = sum(xgoals), .groups = 'drop') %>% rename(team = home.team)
xga.away <- shots %>% filter(home.event == 1) %>% group_by(game.id,away.team) %>% summarise(xGA = sum(xgoals), .groups = 'drop') %>% rename(team = away.team)
xga.by.game <- bind_rows(xga.home,xga.away) %>% arrange(as.numeric(game.id))
ga.home <- shots %>% group_by(game.id,home.team) %>% summarise(GA = max(about.goals.away), .groups = 'drop') %>% rename(team = home.team) %>% mutate(home = 1)
ga.away <- shots %>% group_by(game.id,away.team) %>% summarise(GA = max(about.goals.home), .groups = 'drop') %>% rename(team = away.team) %>% mutate(home = 0)
ga.by.game <- bind_rows(ga.home,ga.away) %>% arrange(as.numeric(game.id))
xg <- xg.by.game %>% left_join(goals.by.game, by = c("game.id","team")) %>% left_join(xga.by.game, by = c("game.id","team")) %>% left_join(ga.by.game, by = c("game.id","team"))
xg$GFabove <- xg$GF-xg$xGF
xg$GAbelow <- xg$xGA-xg$GA
# Calculate team/game fenwick
fen.weights <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & plays$strength == "5x5")
fen.weights$score.diff.adj <- ifelse(fen.weights$score.diff < -3, -3, fen.weights$score.diff)
fen.weights$score.diff.adj <- ifelse(fen.weights$score.diff > 3, 3, fen.weights$score.diff.adj)
fen.weights <- fen.weights %>% group_by(home.event, score.diff.adj) %>% count()
fen.weights <- suppressMessages(bind_cols(fen.weights[1:7,],fen.weights[8:14,]) %>% select(score.diff.adj...2,n...3,n...6))
names(fen.weights) <- c("score.diff.adj","away","home")
fen.weights$away.weight <- ((fen.weights$away+fen.weights$home)/2)/fen.weights$away
fen.weights$home.weight <- ((fen.weights$away+fen.weights$home)/2)/fen.weights$home
fenwick <- bind_rows(tibble(home.event = rep(0,times=7),score.diff.adj = fen.weights$score.diff.adj,fenwick = fen.weights$away.weight),tibble(home.event = rep(1,times=7),score.diff.adj = fen.weights$score.diff.adj,fenwick = fen.weights$home.weight))
plays$score.diff.adj <- ifelse(plays$score.diff < -3, -3, plays$score.diff)
plays$score.diff.adj <- ifelse(plays$score.diff > 3, 3, plays$score.diff.adj)
plays <- plays %>% left_join(fenwick, by = c("score.diff.adj","home.event"))
fen.by.game <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & plays$strength == "5x5")
fen.home <- fen.by.game %>% filter(home.event == 1) %>% group_by(game.id,home.team) %>% summarise(fenwick = sum(fenwick), .groups = 'drop') %>% rename(team = home.team)
fen.away <- fen.by.game %>% filter(home.event == 0) %>% group_by(game.id,away.team) %>% summarise(fenwick = sum(fenwick), .groups = 'drop') %>% rename(team = away.team)
fen.for <- bind_rows(fen.home,fen.away) %>% arrange(as.numeric(game.id))
fen.opp.home <- fen.by.game %>% filter(home.event == 0) %>% group_by(game.id,home.team) %>% summarise(fenwick.opp = sum(fenwick), .groups = 'drop') %>% rename(team = home.team)
fen.opp.away <- fen.by.game %>% filter(home.event == 1) %>% group_by(game.id,away.team) %>% summarise(fenwick.opp = sum(fenwick), .groups = 'drop') %>% rename(team = away.team)
fen.opp <- bind_rows(fen.opp.home,fen.opp.away) %>% arrange(as.numeric(game.id))
fen.by.game <- fen.for %>% left_join(fen.opp, by = c("game.id","team"))
fen.by.game$fenwick.pct <- fen.by.game$fenwick/(fen.by.game$fenwick+fen.by.game$fenwick.opp)
game.stats <- fen.by.game %>% left_join(xg, by = c("game.id","team"))
game.stats$win <- ifelse(game.stats$GF > game.stats$GA,1,0)
suppressMessages(library(tidyverse))
suppressMessages(library(zoo))
suppressMessages(library(gbm))
suppressMessages(library(jsonlite))
suppressMessages(library(progress))
# Load play database
plays <- read_csv("~/Google Drive/Hockey/plays_since_2015.csv", col_types = cols())
api.link <- paste0("https://statsapi.web.nhl.com/api/v1/schedule?season=20202021")
sked <- fromJSON(api.link)
sked <- flatten(unnest(tibble(sked$dates$games),cols = c(`sked$dates$games`)))
results <- sked %>% filter(status.abstractGameState != "Preview")
scheduled <- sked %>% filter(status.abstractGameState == "Preview")
new.ids <- as.character(results$gamePk)
new.ids <- new.ids[!(new.ids %in% plays$game.id)]
new.ids <- new.ids[str_sub(new.ids,5,6)=="02"]
pb <- progress_bar$new(format = "[:bar] :percent eta: :eta",total = length(new.ids))
for (i in new.ids){
pb$tick()
api.link <- paste0("https://statsapi.web.nhl.com/api/v1/game/",i,"/feed/live")
game <- fromJSON(api.link)
new.plays <- flatten(tibble(game$liveData$plays$allPlays)) %>% select(-players)
new.plays$home.team <- game$gameData$teams$home$name
new.plays$away.team <- game$gameData$teams$away$name
new.plays$game.id <- i
if (i==new.ids[1]){all.new.plays <- new.plays} else {all.new.plays <- bind_rows(all.new.plays,new.plays)}
}
if (length(new.ids)>0){
all.new.plays$game.second <- as.numeric(str_sub(all.new.plays$about.periodTime, start = 1, end = 2))*60 + as.numeric(str_sub(all.new.plays$about.periodTime, start = 4, end = 5))
all.new.plays$game.second <- ifelse(all.new.plays$about.period == 2, all.new.plays$game.second + (20*60),all.new.plays$game.second)
all.new.plays$game.second <- ifelse(all.new.plays$about.period == 3, all.new.plays$game.second + (40*60),all.new.plays$game.second)
all.new.plays$game.second <- ifelse(all.new.plays$about.period > 3, NA, all.new.plays$game.second)
all.new.plays$home.skaters <- 5
all.new.plays$away.skaters <- 5
all.new.plays$home.event <- ifelse(all.new.plays$home.team == all.new.plays$team.name,1,0)
mins <- tibble(game.id = rep(unique(all.new.plays$game.id), each = 120), plus = rep(1:120,times = length(unique(all.new.plays$game.id))))
home.pens <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 1 & result.penaltySeverity %in% c("Minor","Bench Minor")) %>% select(game.id,game.second) %>% left_join(mins, by = "game.id") %>% mutate(game.second = game.second + plus)
away.pens <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 0 & result.penaltySeverity %in% c("Minor","Bench Minor")) %>% select(game.id,game.second) %>% left_join(mins, by = "game.id") %>% mutate(game.second = game.second + plus)
major.mins <- tibble(game.id = rep(unique(all.new.plays$game.id), each = 300), plus = rep(1:300,times = length(unique(all.new.plays$game.id))))
home.majors <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 1 & result.penaltySeverity == "Major" & result.secondaryType != "Fighting") %>% select(game.id,game.second) %>% left_join(major.mins, by = "game.id") %>% mutate(game.second = game.second + plus)
away.majors <- all.new.plays %>% filter(result.eventTypeId == "PENALTY" & home.event == 0 & result.penaltySeverity == "Major" & result.secondaryType != "Fighting") %>% select(game.id,game.second) %>% left_join(mins, by = "game.id") %>% mutate(game.second = game.second + plus)
home.pens <- bind_rows(home.pens,home.majors)
away.pens <- bind_rows(away.pens,away.majors)
home.pens <- home.pens %>% group_by(game.id,game.second) %>% count() %>% rename(home.men.down = n) %>% na.omit()
away.pens <- away.pens %>% group_by(game.id,game.second) %>% count() %>% rename(away.men.down = n) %>% na.omit()
home.pens$home.men.down <- ifelse(home.pens$home.men.down > 2,2,home.pens$home.men.down)
away.pens$away.men.down <- ifelse(away.pens$away.men.down > 2,2,away.pens$away.men.down)
all.new.plays <- all.new.plays %>% left_join(home.pens, by = c("game.id","game.second")) %>% left_join(away.pens, by = c("game.id","game.second"))
all.new.plays$home.men.down[is.na(all.new.plays$home.men.down)] <- 0
all.new.plays$away.men.down[is.na(all.new.plays$away.men.down)] <- 0
all.new.plays$home.skaters <- all.new.plays$home.skaters - all.new.plays$home.men.down
all.new.plays$away.skaters <- all.new.plays$away.skaters - all.new.plays$away.men.down
all.new.plays$strength <- paste0(all.new.plays$home.skaters,"x",all.new.plays$away.skaters)
all.new.plays <- all.new.plays %>% select(-home.men.down,-away.men.down)
all.new.plays$score.diff <- all.new.plays$about.goals.home - all.new.plays$about.goals.away
plays <- bind_rows(plays, all.new.plays)
}
# Run xG model and calculate team/game xG-derived stats
shots <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & about.period < 4)
shots$result.emptyNet[is.na(shots$result.emptyNet)] <- FALSE
shots <- shots %>% filter(result.emptyNet == FALSE)
shots$goal <- ifelse(shots$result.eventTypeId == "GOAL",1,0)
shots$shot.angle <- (asin(abs(shots$coordinates.y)/sqrt((87.95 - abs(shots$coordinates.x))^2 + shots$coordinates.y^2))*180) / 3.14
shots$shot.distance <- sqrt((87.95 - abs(shots$coordinates.x))^2 + shots$coordinates.y^2)
shots$man.advantage <- ifelse(shots$home.event == 1, shots$home.skaters - shots$away.skaters, shots$away.skaters - shots$home.skaters)
shots <- shots %>% group_by(game.id,team.name) %>% mutate(last.x = lag(coordinates.x,1)) %>% mutate(last.y = lag(coordinates.y,1)) %>% mutate(last.gamesec = lag(game.second,1))
shots$last.y[is.na(shots$last.y)] <- 0
shots$last.x[is.na(shots$last.x)] <- 0
shots = shots %>% mutate(distance.from.last = sqrt((coordinates.x - last.x)^2 + (coordinates.y - last.y)^2)) %>% mutate(seconds.from.last = game.second - last.gamesec)
shots$distance.from.last[is.na(shots$distance.from.last)] <- mean(shots$distance.from.last, na.rm = T)
shots$seconds.from.last[is.na(shots$seconds.from.last)] <- shots$game.second[is.na(shots$seconds.from.last)]
shots$score.diff.abs <- abs(shots$score.diff)
model <- gbm(goal ~ shot.distance + shot.angle + seconds.from.last + man.advantage + score.diff.abs, data = shots, distribution = "bernoulli", verbose = T)
shots$xgoals <- predict(model,newdata = shots,type="response")
xg.home <- shots %>% filter(home.event == 1) %>% group_by(game.id,home.team) %>% summarise(xGF = sum(xgoals),.groups = 'drop') %>% rename(team = home.team)
xg.away <- shots %>% filter(home.event == 0) %>% group_by(game.id,away.team) %>% summarise(xGF = sum(xgoals),.groups = 'drop') %>% rename(team = away.team)
xg.by.game <- bind_rows(xg.home,xg.away) %>% arrange(as.numeric(game.id))
goals.home <- shots %>% group_by(game.id,home.team) %>% summarise(GF = max(about.goals.home),.groups = 'drop') %>% rename(team = home.team)
goals.away <- shots %>% group_by(game.id,away.team) %>% summarise(GF = max(about.goals.away),.groups = 'drop') %>% rename(team = away.team)
goals.by.game <- bind_rows(goals.home,goals.away) %>% arrange(as.numeric(game.id))
xga.home <- shots %>% filter(home.event == 0) %>% group_by(game.id,home.team) %>% summarise(xGA = sum(xgoals), .groups = 'drop') %>% rename(team = home.team)
xga.away <- shots %>% filter(home.event == 1) %>% group_by(game.id,away.team) %>% summarise(xGA = sum(xgoals), .groups = 'drop') %>% rename(team = away.team)
xga.by.game <- bind_rows(xga.home,xga.away) %>% arrange(as.numeric(game.id))
ga.home <- shots %>% group_by(game.id,home.team) %>% summarise(GA = max(about.goals.away), .groups = 'drop') %>% rename(team = home.team) %>% mutate(home = 1)
ga.away <- shots %>% group_by(game.id,away.team) %>% summarise(GA = max(about.goals.home), .groups = 'drop') %>% rename(team = away.team) %>% mutate(home = 0)
ga.by.game <- bind_rows(ga.home,ga.away) %>% arrange(as.numeric(game.id))
xg <- xg.by.game %>% left_join(goals.by.game, by = c("game.id","team")) %>% left_join(xga.by.game, by = c("game.id","team")) %>% left_join(ga.by.game, by = c("game.id","team"))
xg$GFabove <- xg$GF-xg$xGF
xg$GAbelow <- xg$xGA-xg$GA
xg
fen.weights <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & plays$strength == "5x5")
fen.weights$score.diff.adj <- ifelse(fen.weights$score.diff < -3, -3, fen.weights$score.diff)
fen.weights$score.diff.adj <- ifelse(fen.weights$score.diff > 3, 3, fen.weights$score.diff.adj)
fen.weights <- fen.weights %>% group_by(home.event, score.diff.adj) %>% count()
fen.weights <- suppressMessages(bind_cols(fen.weights[1:7,],fen.weights[8:14,]) %>% select(score.diff.adj...2,n...3,n...6))
names(fen.weights) <- c("score.diff.adj","away","home")
fen.weights$away.weight <- ((fen.weights$away+fen.weights$home)/2)/fen.weights$away
fen.weights$home.weight <- ((fen.weights$away+fen.weights$home)/2)/fen.weights$home
fenwick <- bind_rows(tibble(home.event = rep(0,times=7),score.diff.adj = fen.weights$score.diff.adj,fenwick = fen.weights$away.weight),tibble(home.event = rep(1,times=7),score.diff.adj = fen.weights$score.diff.adj,fenwick = fen.weights$home.weight))
plays$score.diff.adj <- ifelse(plays$score.diff < -3, -3, plays$score.diff)
plays$score.diff.adj <- ifelse(plays$score.diff > 3, 3, plays$score.diff.adj)
plays <- plays %>% left_join(fenwick, by = c("score.diff.adj","home.event"))
fen.by.game <- plays %>% filter(result.eventTypeId %in% c("GOAL","SHOT","MISSED_SHOT") & plays$strength == "5x5")
fen.home <- fen.by.game %>% filter(home.event == 1) %>% group_by(game.id,home.team) %>% summarise(fenwick = sum(fenwick), .groups = 'drop') %>% rename(team = home.team)
fen.away <- fen.by.game %>% filter(home.event == 0) %>% group_by(game.id,away.team) %>% summarise(fenwick = sum(fenwick), .groups = 'drop') %>% rename(team = away.team)
fen.for <- bind_rows(fen.home,fen.away) %>% arrange(as.numeric(game.id))
fen.opp.home <- fen.by.game %>% filter(home.event == 0) %>% group_by(game.id,home.team) %>% summarise(fenwick.opp = sum(fenwick), .groups = 'drop') %>% rename(team = home.team)
fen.opp.away <- fen.by.game %>% filter(home.event == 1) %>% group_by(game.id,away.team) %>% summarise(fenwick.opp = sum(fenwick), .groups = 'drop') %>% rename(team = away.team)
fen.opp <- bind_rows(fen.opp.home,fen.opp.away) %>% arrange(as.numeric(game.id))
fen.by.game <- fen.for %>% left_join(fen.opp, by = c("game.id","team"))
fen.by.game$fenwick.pct <- fen.by.game$fenwick/(fen.by.game$fenwick+fen.by.game$fenwick.opp)
game.stats <- fen.by.game %>% left_join(xg, by = c("game.id","team"))
game.stats$win <- ifelse(game.stats$GF > game.stats$GA,1,0)
game.stats
names(game.stats)
# Model team power rankings
model.games <- game.stats %>% select(-game.id,-team,-fenwick,-fenwick.opp)
# Model team power rankings
model.games <- game.stats %>% select(-game.id,-fenwick,-fenwick.opp)
model.games
# Model team power rankings
model.games <- game.stats %>% arrange(as.numeric(game.id)) %>% select(-game.id,-fenwick,-fenwick.opp)
model.games
model.games <- games %>% mutate(fenwick.pct = lag(rollmean(fenwick.pct,20,align='right',fill=NA),1)) %>% mutate(xGF = lag(rollmean(xGF,20,align='right',fill=NA),1)) %>% mutate(GF = lag(rollmean(GF,20,align='right',fill=NA),1)) %>% mutate(xGA = lag(rollmean(xGA,20,align='right',fill=NA),1)) %>% mutate(GA = lag(rollmean(GA,20,align='right',fill=NA),1)) %>% mutate(GFabove = lag(rollmean(GFabove,20,align='right',fill=NA),1)) %>% mutate(GAbelow = lag(rollmean(GAbelow,20,align='right',fill=NA),1))
model.games <- model.games %>% mutate(fenwick.pct = lag(rollmean(fenwick.pct,20,align='right',fill=NA),1)) %>% mutate(xGF = lag(rollmean(xGF,20,align='right',fill=NA),1)) %>% mutate(GF = lag(rollmean(GF,20,align='right',fill=NA),1)) %>% mutate(xGA = lag(rollmean(xGA,20,align='right',fill=NA),1)) %>% mutate(GA = lag(rollmean(GA,20,align='right',fill=NA),1)) %>% mutate(GFabove = lag(rollmean(GFabove,20,align='right',fill=NA),1)) %>% mutate(GAbelow = lag(rollmean(GAbelow,20,align='right',fill=NA),1))
model.games
tail(model.games)
model.games <- model.games %>% mutate(fenwick.pct = lag(rollmean(fenwick.pct,20,align='right',fill=NA),1)) %>% mutate(xGF = lag(rollmean(xGF,20,align='right',fill=NA),1)) %>% mutate(GF = lag(rollmean(GF,20,align='right',fill=NA),1)) %>% mutate(xGA = lag(rollmean(xGA,20,align='right',fill=NA),1)) %>% mutate(GA = lag(rollmean(GA,20,align='right',fill=NA),1)) %>% mutate(GFabove = lag(rollmean(GFabove,20,align='right',fill=NA),1)) %>% mutate(GAbelow = lag(rollmean(GAbelow,20,align='right',fill=NA),1)) %>% na.omit()
model.games <- game.stats %>% arrange(as.numeric(game.id)) %>% select(-team,-fenwick,-fenwick.opp)
model.games <- model.games %>% mutate(fenwick.pct = lag(rollmean(fenwick.pct,20,align='right',fill=NA),1)) %>% mutate(xGF = lag(rollmean(xGF,20,align='right',fill=NA),1)) %>% mutate(GF = lag(rollmean(GF,20,align='right',fill=NA),1)) %>% mutate(xGA = lag(rollmean(xGA,20,align='right',fill=NA),1)) %>% mutate(GA = lag(rollmean(GA,20,align='right',fill=NA),1)) %>% mutate(GFabove = lag(rollmean(GFabove,20,align='right',fill=NA),1)) %>% mutate(GAbelow = lag(rollmean(GAbelow,20,align='right',fill=NA),1)) %>% na.omit()
model.games
model.home <- model.games %>% filter(home == 1) %>% select(-home)
model.away <- model.games %>% filter(home == 0) %>% select(-home,-win)
names(model.away)
names(model.away)[2:8] <- paste0("away.",names(model.away)[2:8])
model.games <- model.home %>% left_join(model.away, by = "game.id") %>% select(-home.or.away) %>% na.omit()
model.games <- model.home %>% left_join(model.away, by = "game.id") %>% na.omit()
model.games
names(model.games)
model <- gbm(win ~ fenwick.pct + xGF + GF + xGA + GA + GFabove + GAbelow + away.fenwick.pct + away.xGF + away.GF + away.xGA + away.GA + away.GFabove + away.GAbelow, data = train.games, distribution = "bernoulli", verbose = T)
model <- gbm(win ~ fenwick.pct + xGF + GF + xGA + GA + GFabove + GAbelow + away.fenwick.pct + away.xGF + away.GF + away.xGA + away.GA + away.GFabove + away.GAbelow, data = model.games, distribution = "bernoulli", verbose = T)
model <- gbm(win ~ fenwick.pct + xGF + GF + xGA + GA + GFabove + GAbelow + away.fenwick.pct + away.xGF + away.GF + away.xGA + away.GA + away.GFabove + away.GAbelow, data = model.games, distribution = "bernoulli", verbose = T,n.trees = 500)
model <- gbm(win ~ fenwick.pct + xGF + GF + xGA + GA + GFabove + GAbelow + away.fenwick.pct + away.xGF + away.GF + away.xGA + away.GA + away.GFabove + away.GAbelow, data = model.games, distribution = "bernoulli", verbose = T,n.trees = 200)
summary(model)
model <- gbm(win ~ fenwick.pct + xGF + GF + xGA + GA + GFabove + GAbelow + away.fenwick.pct + away.xGF + away.GF + away.xGA + away.GA + away.GFabove + away.GAbelow, data = model.games, distribution = "bernoulli", verbose = T,n.trees = 200)
summary(moel)
summary(model)
model <- glm(win ~ fenwick.pct + xGF + GF + xGA + GA + GFabove + GAbelow + away.fenwick.pct + away.xGF + away.GF + away.xGA + away.GA + away.GFabove + away.GAbelow, data = model.games, family = "binomial")
summary(model)
model <- glm(win ~ fenwick.pct + xGF + GF + xGA + GA + away.fenwick.pct + away.xGF + away.GF + away.xGA + away.GA, data = model.games, distribution = "bernoulli", verbose = T,n.trees = 200)
model <- gbm(win ~ fenwick.pct + xGF + GF + xGA + GA + away.fenwick.pct + away.xGF + away.GF + away.xGA + away.GA, data = model.games, distribution = "bernoulli", verbose = T,n.trees = 200)
summary(model)
model <- glm(win ~ fenwick.pct + xGF + GF + xGA + GA + away.fenwick.pct + away.xGF + away.GF + away.xGA + away.GA, data = model.games, family = "binomial")
summary(model)
summary(model.games)
