temp <- temp[order(-temp$gd),]
temp$rank <- rank(-temp$points, ties.method = "first")
all.sims <- rbind(all.sims, temp)
}
all.sims <- all.sims[complete.cases(all.sims), ]
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
proj.points$proj.points <- proj.points$proj.points+6
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank == 1) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter((rank < 5) | (rank == 16)) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 16) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final.2aBG3 <- final[order(-final$proj.points),]
partits.2aBG3 <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.2aBG3, "final-2aBG3.csv", row.names = FALSE)
write.csv(partits.2aBG3, "games-2aBG3.csv", row.names = FALSE)
####### Primera Catalana, Grup I
# Scrape data
url <- 'https://www.resultados-futbol.com/primera_catalana2020/grupo1/calendario'
webpage <- read_html(url)
local_data <- html_nodes(webpage,'.equipo1')
local_data <- html_text(local_data)
vist_data <- html_nodes(webpage,'.equipo2')
vist_data <- html_text(vist_data)
result_data <- html_nodes(webpage,'.url')
result_data <- html_text(result_data)
dates_data <- html_nodes(webpage,'.fecha')
dates_data <- html_text(dates_data)
# Create data frame
games <- data.frame(home = local_data, away = vist_data, score = result_data, date = dates_data)
games$week <- rep(1:34, each = 8)
schedule1 <- subset(games, grepl("x", games$score))
schedule2 <- subset(games, grepl(":", games$score))
schedule <- rbind(schedule2, schedule1)
schedule <- schedule %>% select(-score, -date)
schedule <- schedule[order(-schedule$week),]
results <- subset(games, grepl("-", games$score))
results <- subset(results, !grepl("x", results$score))
results <- results %>% separate(score, c("home.score", "away.score"))
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Create date variable
results <- results %>% separate(date, c("day", "month", "year"))
results$year <- as.numeric(results$year) + 2000
month.recode <- NA
month.recode$month <- c("Ago", "Sep", "Oct", "Nov", "Dic", "Ene", "Feb", "Mar", "Abr", "May")
month.recode <- as.data.frame(month.recode)
month.recode$month.num <- c(8,9,10,11,12,1,2,3,4,5)
month.recode <- month.recode %>% select(month, month.num)
results <- results %>% left_join(month.recode, by = "month")
results$date <- as.Date(with(results, paste(year, month.num, day,sep="-")), "%Y-%m-%d")
results <- results %>% select(-day, -month, -year, -month.num)
# Dixon-Coles Ratings Model
weights <- weights_dc(results$date, xi=0.002)
gm_res <- goalmodel(goals1 = results$home.score, goals2 = results$away.score,
team1 = results$home, team2=results$away, weights = weights, dc=TRUE)
ratings <- as.data.frame(gm_res$parameters)
ratings <- rownames_to_column(ratings, "team")
ratings$off.rank <- rank(-ratings$attack, ties.method = "random")
ratings$def.rank <- rank(-ratings$defense, ties.method = "random")
# Dixon-Coles Game-by-Game Predictions
predictions <- predict_result(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# Add week back
games$key <- paste(games$home, games$away, sep="")
predictions$key <- paste(predictions$team1, predictions$team2, sep="")
predictions <- predictions %>% left_join(games, by = "key") %>% select(week, team1, p1, pd, p2, team2)
## Calculate Predicated GD
goal.preds <- predict_expg(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# GF
pgf.home <- goal.preds %>% group_by(team1) %>%
summarize(gf = sum(expg1))
pgf.away <- goal.preds %>% group_by(team2) %>%
summarize(gf = sum(expg2))
colnames(pgf.home)[1] <- 'team'
colnames(pgf.away)[1] <- 'team'
gf.home <- results %>% group_by(home) %>%
summarize(gf = sum(home.score))
gf.away <- results %>% group_by(away) %>%
summarize(gf = sum(away.score))
colnames(gf.home)[1] <- 'team'
colnames(gf.away)[1] <- 'team'
gf <- rbind(pgf.home, pgf.away, gf.home, gf.away)
gf <- gf %>% group_by(team) %>%
summarize(gf = sum(gf))
# GA
pga.home <- goal.preds %>% group_by(team1) %>%
summarize(ga = sum(expg2))
pga.away <- goal.preds %>% group_by(team2) %>%
summarize(ga = sum(expg1))
colnames(pga.home)[1] <- 'team'
colnames(pga.away)[1] <- 'team'
ga.home <- results %>% group_by(home) %>%
summarize(ga = sum(away.score))
ga.away <- results %>% group_by(away) %>%
summarize(ga = sum(home.score))
colnames(ga.home)[1] <- 'team'
colnames(ga.away)[1] <- 'team'
ga <- rbind(pga.home, pga.away, ga.home, ga.away)
ga <- ga %>% group_by(team) %>%
summarize(ga = sum(ga))
# GD
gd <- gf %>% left_join(ga, by = "team")
gd$gd <- gd$gf - gd$ga + 6
gd <- gd %>% select(team, gd)
# Current Table
table <- results
table <- mutate(table, home.points = ifelse(home.score > away.score, 3,
ifelse(home.score == away.score, 1, 0)))
table <- mutate(table, away.points = ifelse(home.score < away.score, 3,
ifelse(home.score == away.score, 1, 0)))
table.home <- table %>% group_by(home) %>%
summarize(points = sum(home.points))
table.away <- table %>% group_by(away) %>%
summarize(points = sum(away.points))
colnames(table.home)[1] <- 'team'
colnames(table.away)[1] <- 'team'
table.all <- rbind(table.home, table.away)
table.all <- table.all %>% group_by(team) %>%
summarize(points = sum(points))
# Simulation
all.sims <- NA
i.sim <- 10000
for (i in 1:i.sim){
temp <- predictions
temp$sim <- runif((nrow(temp)),0,1)
temp <- mutate(temp, team1.points = ifelse(sim < p1, 3,
ifelse(sim > (1-p2), 0, 1)))
temp <- mutate(temp, team2.points = ifelse(team1.points == 0, 3,
ifelse(team1.points == 3, 0, 1)))
temp1 <- temp %>% select(team1, team1.points) %>% group_by(team1) %>% summarize(points = sum(team1.points))
temp2 <- temp %>% select(team2, team2.points) %>% group_by(team2) %>% summarize(points = sum(team2.points))
colnames(temp1)[1] <- 'team'
colnames(temp2)[1] <- 'team'
temp <- rbind(temp1, temp2)
temp <- temp %>% group_by(team) %>% summarize(points = sum(points))
temp <- rbind(temp, table.all)
temp <- temp %>% group_by(team) %>% summarize(points = sum(points))
temp <- temp %>% left_join(gd, by = "team")
temp <- temp[order(-temp$gd),]
temp$rank <- rank(-temp$points, ties.method = "first")
all.sims <- rbind(all.sims, temp)
}
all.sims <- all.sims[complete.cases(all.sims), ]
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
proj.points$proj.points <- proj.points$proj.points+6
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank == 1) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter((rank == 2) | (rank == 14)) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 14 ) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final.primcat1 <- final[order(-final$proj.points),]
partits.primcat1 <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.primcat1, "final-primcat1.csv", row.names = FALSE)
write.csv(partits.primcat1, "games-primcat1.csv", row.names = FALSE)
####### Primera Catalana, Grup II
# Scrape data
url <- 'https://www.resultados-futbol.com/primera_catalana2020/grupo2/calendario'
webpage <- read_html(url)
local_data <- html_nodes(webpage,'.equipo1')
local_data <- html_text(local_data)
vist_data <- html_nodes(webpage,'.equipo2')
vist_data <- html_text(vist_data)
result_data <- html_nodes(webpage,'.url')
result_data <- html_text(result_data)
dates_data <- html_nodes(webpage,'.fecha')
dates_data <- html_text(dates_data)
# Create data frame
games <- data.frame(home = local_data, away = vist_data, score = result_data, date = dates_data)
games$week <- rep(1:34, each = 9)
schedule1 <- subset(games, grepl("x", games$score))
schedule2 <- subset(games, grepl(":", games$score))
schedule <- rbind(schedule2, schedule1)
schedule <- schedule %>% select(-score, -date)
schedule <- scheduled[order(-schedule$week),]
results <- subset(games, grepl("-", games$score))
results <- subset(results, !grepl("x", results$score))
results <- results %>% separate(score, c("home.score", "away.score"))
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Create date variable
results <- results %>% separate(date, c("day", "month", "year"))
results$year <- as.numeric(results$year) + 2000
month.recode <- NA
month.recode$month <- c("Ago", "Sep", "Oct", "Nov", "Dic", "Ene", "Feb", "Mar", "Abr", "May")
month.recode <- as.data.frame(month.recode)
month.recode$month.num <- c(8,9,10,11,12,1,2,3,4,5)
month.recode <- month.recode %>% select(month, month.num)
results <- results %>% left_join(month.recode, by = "month")
results$date <- as.Date(with(results, paste(year, month.num, day,sep="-")), "%Y-%m-%d")
results <- results %>% select(-day, -month, -year, -month.num)
# Dixon-Coles Ratings Model
weights <- weights_dc(results$date, xi=0.002)
gm_res <- goalmodel(goals1 = results$home.score, goals2 = results$away.score,
team1 = results$home, team2=results$away, weights = weights, dc=TRUE)
ratings <- as.data.frame(gm_res$parameters)
ratings <- rownames_to_column(ratings, "team")
ratings$off.rank <- rank(-ratings$attack, ties.method = "random")
ratings$def.rank <- rank(-ratings$defense, ties.method = "random")
# Dixon-Coles Game-by-Game Predictions
predictions <- predict_result(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# Add week back
games$key <- paste(games$home, games$away, sep="")
predictions$key <- paste(predictions$team1, predictions$team2, sep="")
predictions <- predictions %>% left_join(games, by = "key") %>% select(week, team1, p1, pd, p2, team2)
## Calculate Predicated GD
goal.preds <- predict_expg(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# GF
pgf.home <- goal.preds %>% group_by(team1) %>%
summarize(gf = sum(expg1))
pgf.away <- goal.preds %>% group_by(team2) %>%
summarize(gf = sum(expg2))
colnames(pgf.home)[1] <- 'team'
colnames(pgf.away)[1] <- 'team'
gf.home <- results %>% group_by(home) %>%
summarize(gf = sum(home.score))
gf.away <- results %>% group_by(away) %>%
summarize(gf = sum(away.score))
colnames(gf.home)[1] <- 'team'
colnames(gf.away)[1] <- 'team'
gf <- rbind(pgf.home, pgf.away, gf.home, gf.away)
gf <- gf %>% group_by(team) %>%
summarize(gf = sum(gf))
# GA
pga.home <- goal.preds %>% group_by(team1) %>%
summarize(ga = sum(expg2))
pga.away <- goal.preds %>% group_by(team2) %>%
summarize(ga = sum(expg1))
colnames(pga.home)[1] <- 'team'
colnames(pga.away)[1] <- 'team'
ga.home <- results %>% group_by(home) %>%
summarize(ga = sum(away.score))
ga.away <- results %>% group_by(away) %>%
summarize(ga = sum(home.score))
colnames(ga.home)[1] <- 'team'
colnames(ga.away)[1] <- 'team'
ga <- rbind(pga.home, pga.away, ga.home, ga.away)
ga <- ga %>% group_by(team) %>%
summarize(ga = sum(ga))
# GD
gd <- gf %>% left_join(ga, by = "team")
gd$gd <- gd$gf - gd$ga + 6
gd <- gd %>% select(team, gd)
# Current Table
table <- results
table <- mutate(table, home.points = ifelse(home.score > away.score, 3,
ifelse(home.score == away.score, 1, 0)))
table <- mutate(table, away.points = ifelse(home.score < away.score, 3,
ifelse(home.score == away.score, 1, 0)))
table.home <- table %>% group_by(home) %>%
summarize(points = sum(home.points))
table.away <- table %>% group_by(away) %>%
summarize(points = sum(away.points))
colnames(table.home)[1] <- 'team'
colnames(table.away)[1] <- 'team'
table.all <- rbind(table.home, table.away)
table.all <- table.all %>% group_by(team) %>%
summarize(points = sum(points))
# Simulation
all.sims <- NA
i.sim <- 10000
for (i in 1:i.sim){
temp <- predictions
temp$sim <- runif((nrow(temp)),0,1)
temp <- mutate(temp, team1.points = ifelse(sim < p1, 3,
ifelse(sim > (1-p2), 0, 1)))
temp <- mutate(temp, team2.points = ifelse(team1.points == 0, 3,
ifelse(team1.points == 3, 0, 1)))
temp1 <- temp %>% select(team1, team1.points) %>% group_by(team1) %>% summarize(points = sum(team1.points))
temp2 <- temp %>% select(team2, team2.points) %>% group_by(team2) %>% summarize(points = sum(team2.points))
colnames(temp1)[1] <- 'team'
colnames(temp2)[1] <- 'team'
temp <- rbind(temp1, temp2)
temp <- temp %>% group_by(team) %>% summarize(points = sum(points))
temp <- rbind(temp, table.all)
temp <- temp %>% group_by(team) %>% summarize(points = sum(points))
temp <- temp %>% left_join(gd, by = "team")
temp <- temp[order(-temp$gd),]
temp$rank <- rank(-temp$points, ties.method = "first")
all.sims <- rbind(all.sims, temp)
}
all.sims <- all.sims[complete.cases(all.sims), ]
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
proj.points$proj.points <- proj.points$proj.points+6
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank == 1) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter((rank == 2) | (rank == 14)) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 14 ) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final.primcat2 <- final[order(-final$proj.points),]
partits.primcat2 <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.primcat2, "final-primcat2.csv", row.names = FALSE)
write.csv(partits.primcat2, "games-primcat2.csv", row.names = FALSE)
####### Lliga Femenina
# Scrape data
url <- 'https://www.resultados-futbol.com/primera_division_femenina2020/grupo1/calendario'
webpage <- read_html(url)
local_data <- html_nodes(webpage,'.equipo1')
local_data <- html_text(local_data)
vist_data <- html_nodes(webpage,'.equipo2')
vist_data <- html_text(vist_data)
result_data <- html_nodes(webpage,'.url')
result_data <- html_text(result_data)
dates_data <- html_nodes(webpage,'.fecha')
dates_data <- html_text(dates_data)
# Create data frame
games <- data.frame(home = local_data, away = vist_data, score = result_data, date = dates_data)
games$week <- rep(1:30, each = 8)
schedule1 <- subset(games, grepl("x", games$score))
schedule2 <- subset(games, grepl(":", games$score))
schedule <- rbind(schedule2, schedule1)
schedule <- schedule %>% select(-score, -date)
schedule <- schedule[order(schedule$week),]
results <- subset(games, grepl("-", games$score))
results <- subset(results, !grepl("x", results$score))
results <- results %>% separate(score, c("home.score", "away.score"))
results$home.score <- as.numeric(results$home.score)
results$away.score <- as.numeric(results$away.score)
# Create date variable
results <- results %>% separate(date, c("day", "month", "year"))
results$year <- as.numeric(results$year) + 2000
month.recode <- NA
month.recode$month <- c("Ago", "Sep", "Oct", "Nov", "Dic", "Ene", "Feb", "Mar", "Abr", "May")
month.recode <- as.data.frame(month.recode)
month.recode$month.num <- c(8,9,10,11,12,1,2,3,4,5)
month.recode <- month.recode %>% select(month, month.num)
results <- results %>% left_join(month.recode, by = "month")
results$date <- as.Date(with(results, paste(year, month.num, day,sep="-")), "%Y-%m-%d")
results <- results %>% select(-day, -month, -year, -month.num)
# Dixon-Coles Ratings Model
weights <- weights_dc(results$date, xi=0.002)
gm_res <- goalmodel(goals1 = results$home.score, goals2 = results$away.score,
team1 = results$home, team2=results$away, weights = weights, dc=TRUE)
ratings <- as.data.frame(gm_res$parameters)
ratings <- rownames_to_column(ratings, "team")
ratings$off.rank <- rank(-ratings$attack, ties.method = "random")
ratings$def.rank <- rank(-ratings$defense, ties.method = "random")
# Dixon-Coles Game-by-Game Predictions
predictions <- predict_result(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# Add week back
games$key <- paste(games$home, games$away, sep="")
predictions$key <- paste(predictions$team1, predictions$team2, sep="")
predictions <- predictions %>% left_join(games, by = "key") %>% select(week, team1, p1, pd, p2, team2)
## Calculate Predicated GD
goal.preds <- predict_expg(gm_res, team1=schedule$home, team2=schedule$away, return_df = TRUE)
# GF
pgf.home <- goal.preds %>% group_by(team1) %>%
summarize(gf = sum(expg1))
pgf.away <- goal.preds %>% group_by(team2) %>%
summarize(gf = sum(expg2))
colnames(pgf.home)[1] <- 'team'
colnames(pgf.away)[1] <- 'team'
gf.home <- results %>% group_by(home) %>%
summarize(gf = sum(home.score))
gf.away <- results %>% group_by(away) %>%
summarize(gf = sum(away.score))
colnames(gf.home)[1] <- 'team'
colnames(gf.away)[1] <- 'team'
gf <- rbind(pgf.home, pgf.away, gf.home, gf.away)
gf <- gf %>% group_by(team) %>%
summarize(gf = sum(gf))
# GA
pga.home <- goal.preds %>% group_by(team1) %>%
summarize(ga = sum(expg2))
pga.away <- goal.preds %>% group_by(team2) %>%
summarize(ga = sum(expg1))
colnames(pga.home)[1] <- 'team'
colnames(pga.away)[1] <- 'team'
ga.home <- results %>% group_by(home) %>%
summarize(ga = sum(away.score))
ga.away <- results %>% group_by(away) %>%
summarize(ga = sum(home.score))
colnames(ga.home)[1] <- 'team'
colnames(ga.away)[1] <- 'team'
ga <- rbind(pga.home, pga.away, ga.home, ga.away)
ga <- ga %>% group_by(team) %>%
summarize(ga = sum(ga))
# GD
gd <- gf %>% left_join(ga, by = "team")
gd$gd <- gd$gf - gd$ga + 6
gd <- gd %>% select(team, gd)
# Current Table
table <- results
table <- mutate(table, home.points = ifelse(home.score > away.score, 3,
ifelse(home.score == away.score, 1, 0)))
table <- mutate(table, away.points = ifelse(home.score < away.score, 3,
ifelse(home.score == away.score, 1, 0)))
table.home <- table %>% group_by(home) %>%
summarize(points = sum(home.points))
table.away <- table %>% group_by(away) %>%
summarize(points = sum(away.points))
colnames(table.home)[1] <- 'team'
colnames(table.away)[1] <- 'team'
table.all <- rbind(table.home, table.away)
table.all <- table.all %>% group_by(team) %>%
summarize(points = sum(points))
# Simulation
all.sims <- NA
i.sim <- 10000
for (i in 1:i.sim){
temp <- predictions
temp$sim <- runif((nrow(temp)),0,1)
temp <- mutate(temp, team1.points = ifelse(sim < p1, 3,
ifelse(sim > (1-p2), 0, 1)))
temp <- mutate(temp, team2.points = ifelse(team1.points == 0, 3,
ifelse(team1.points == 3, 0, 1)))
temp1 <- temp %>% select(team1, team1.points) %>% group_by(team1) %>% summarize(points = sum(team1.points))
temp2 <- temp %>% select(team2, team2.points) %>% group_by(team2) %>% summarize(points = sum(team2.points))
colnames(temp1)[1] <- 'team'
colnames(temp2)[1] <- 'team'
temp <- rbind(temp1, temp2)
temp <- temp %>% group_by(team) %>% summarize(points = sum(points))
temp <- rbind(temp, table.all)
temp <- temp %>% group_by(team) %>% summarize(points = sum(points))
temp <- temp %>% left_join(gd, by = "team")
temp <- temp[order(-temp$gd),]
temp$rank <- rank(-temp$points, ties.method = "first")
all.sims <- rbind(all.sims, temp)
}
all.sims <- all.sims[complete.cases(all.sims), ]
## Combine Results Into Final Table
final <- ratings %>% select(team, off.rank, def.rank)
final <- final %>% left_join(gd, by = "team")
proj.points <- all.sims %>% group_by(team) %>% summarize(proj.points = mean(points))
proj.points$proj.points <- proj.points$proj.points+6
final <- final %>% left_join(proj.points, by = "team")
champ <- all.sims %>% filter(rank == 1) %>% group_by(team) %>% count
champ$champ.pct <- (champ$n/i.sim)
champ <- champ %>% select(-n)
final <- final %>% left_join(champ, by = "team")
playoff <- all.sims %>% filter(rank < 3) %>% group_by(team) %>% count
playoff$playoff.pct <- (playoff$n/i.sim)
playoff <- playoff %>% select(-n)
final <- final %>% left_join(playoff, by = "team")
drop <- all.sims %>% filter(rank > 14 ) %>% group_by(team) %>% count
drop$drop.pct <- (drop$n/i.sim)
drop <- drop %>% select(-n)
final <- final %>% left_join(drop, by = "team")
final[is.na(final)] <- 0
final <- final %>%
mutate(champ.pct = percent(champ.pct, 2)) %>%
mutate(drop.pct = percent(drop.pct, 2)) %>%
mutate(playoff.pct = percent(playoff.pct, 2))
final <- final %>% select(team, proj.points, gd, champ.pct, playoff.pct, drop.pct, off.rank, def.rank)
final.prifem <- final[order(-final$proj.points),]
partits.prifem <- predictions %>% mutate(p1 = percent(p1, 2)) %>%
mutate(pd = percent(pd, 2)) %>%
mutate(p2 = percent(p2, 2))
write.csv(final.prifem, "final-prifem.csv", row.names = FALSE)
write.csv(partits.prifem, "games-prifem.csv", row.names = FALSE)
####### Render Site
library(blogdown)
library(rmarkdown)
setwd("~/Google Drive/Futbol/futstatcat")
render_site()
serve_site()
